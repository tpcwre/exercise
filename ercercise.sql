-- MySQL dump 10.13  Distrib 5.6.26, for Win32 (x86)
--
-- Host: localhost    Database: myexercise
-- ------------------------------------------------------
-- Server version	5.6.26

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `a3`
--

DROP TABLE IF EXISTS `a3`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `a3` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `ch` varchar(9) NOT NULL,
  `en` varchar(9) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `a3`
--

LOCK TABLES `a3` WRITE;
/*!40000 ALTER TABLE `a3` DISABLE KEYS */;
/*!40000 ALTER TABLE `a3` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `a4`
--

DROP TABLE IF EXISTS `a4`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `a4` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `ch` varchar(9) NOT NULL,
  `en` varchar(9) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `a4`
--

LOCK TABLES `a4` WRITE;
/*!40000 ALTER TABLE `a4` DISABLE KEYS */;
/*!40000 ALTER TABLE `a4` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `aa55`
--

DROP TABLE IF EXISTS `aa55`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `aa55` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `ch` varchar(9999) NOT NULL,
  `en` varchar(9999) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `aa55`
--

LOCK TABLES `aa55` WRITE;
/*!40000 ALTER TABLE `aa55` DISABLE KEYS */;
/*!40000 ALTER TABLE `aa55` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `bootstrap`
--

DROP TABLE IF EXISTS `bootstrap`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `bootstrap` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `ch` varchar(9999) DEFAULT NULL,
  `en` varchar(9999) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `bootstrap`
--

LOCK TABLES `bootstrap` WRITE;
/*!40000 ALTER TABLE `bootstrap` DISABLE KEYS */;
INSERT INTO `bootstrap` VALUES (1,'bootstrap-> 设置页面等浏览时等比绽放','\n\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">'),(2,'bootstrap-> 两种布局容器','\n\n.container 类用于固定宽度并支持响应式布局的容器。\n\n<div class=\"container\">\n  ...\n</div>\n\n\n.container-fluid 类用于 100% 宽度，占据全部视口（viewport）的容器。\n\n<div class=\"container-fluid\">\n  ...\n</div>'),(3,'bootstrap-> 按钮类的声明，七种色调，四种大小','\n\n//使用\n<div style=\"btn btn-xs btn-info\">按键</div>\n\n\n//大小\nbtn-lg  大号\nbtn-md  普通，默认值，该参数可以省略\nbtn-sm  中号\nbtn-xs  小号\n\n\n//背景色\nbtn-default  黑字蓝边白底\nbtn-primary  白字蓝底\nbtn-success  白字棕底\nbtn-info     白字浅蓝\nbtn-warning  白字桔黄底\nbtn-danger   白字深棕底\nbtn-link     蓝字白底白边'),(5,'bootstrap-> 带边框图片','\n\n\n//class=\"img-thumbnail\"\n<img src=\"1.jpg\" width=200  class=\"img-thumbnail\" alt=\"this is wrong\">'),(6,'bootstrap-> 类似按钮效果的label','\n\n<h1><div class=\"label label-primary\">primary</div></h1>\n\n<h2><i class=\"label label-info\">info</i></h2>\n\n<h3><b class=\"label label-warning\">warning</b></h3>\n\n<h4><u class=\"label label-danger\">danger</u></h4>\n\n<h5><a class=\"label label-success\">success</a></h5>\n\n<h6><span class=\"label label-default\">default</span></h6>'),(7,'bootstrap-> 表格table样式的使用，四种形式（普通，紧凑，带边框，隔行换色）','\n\n\n\n只需在table 中声明类即可\n\n//普通（表格无边框，内容会有上下边框）\n<table class=\"table\"></table>\n\n\n//紧凑型(样式类似普通，但布局紧凑)\n<table class=\"table condensed\"></table>\n\n\n//显示内容的边框型\n<table class=\"table table-bordered\"></table>\n\n\n//内容隔行换色型\n<table class=\"table table-striped\"></table>'),(8,'bootstrap-> badge 镶嵌在标题中的数量提示','\n\n\n\n<h2><i class=\"label label-info\">family<u class=\"badge\">22</u></i></h2>\n		\n\n<h2><i class=\"label label-info\">family<div class=\"badge\">22</div></i></h2>\n\n\n<a href=\"#\">Inbox <span class=\"badge\">42</span></a>\n\n<a href=\"#\" class=\"btn btn-default\">Inbox <span class=\"badge\">42</span></a>\n\n<a href=\"#\" class=\"btn btn-default active\">Inbox <span class=\"badge\">42</span></a>'),(9,'bootstrap-> 导航栏（两种样式）','\n\n\n\n//选中带背景色\n<div class=\"col-xs-12\">\n<ul class=\"nav nav-pills\">\n<li class=\"active\"><a>aa</a></li>\n<li><a>bb</a></li>\n<li><a>cc</a></li>\n</ul>\n</div>\n\n\n//选中无背景色\n<div class=\"col-xs-12\">\n<ul class=\"nav nav-tabs\">\n<li class=\"active\"><a href=\"\">a</a></li>\n<li><a href=\"\">b</a></li>\n<li><a href=\"\">c</a></li>\n</ul>\n<div>'),(10,'bootstrap-> 下拉列表','\n\n<div class=\"row\">\n<div class=\"col-md-4\">\n<div data-toggle=\"dropdown\">aaaaaaaaa</div>\n<ul class=\"dropdown-menu\">\n<li><a href=\"\">aaa</a></li>\n<li><a href=\"\">vvv</a></li>\n<li class=\"divider\"></li>\n<li class=\"dropdown-header\">ccc</li>\n<li><a href=\"\">ddd</a></li>\n</ul>\n</div>\n</div>\n\n\ndivider    分隔线\ndropdown-header  表头灰色不可选'),(12,'bootstrap-> 黑色，浅色横向导航栏','\n\nnavbar navbar-default    浅色\nnavbar navbar-inverse    黑色\nli中可以包含下拉列表 dropdown-menu\n\n<nav class=\"navbar navbar-inverse\">\n<ul class=\"nav navbar-nav\">\n<li class=\"active\"><a href=\"#\">Home</a></li>\n<li><a href=\"#\">About</a></li>\n<li><a href=\"#\">Contact</a></li>\n<li>\n<a href=\"#\" data-toggle=\"dropdown\">dropdown<span class=\"caret\"></span></a>\n<ul class=\"dropdown-menu\">\n<li class=\"active\"><a href=\"#\">a</a></li>\n<li class=\"dropdown-header\">b</li>\n<li class=\"divider\"></li>\n<li><a href=\"#\">b</a></li>\n<li><a href=\"#\">c</a></li>\n</ul>\n</li>\n</ul>\n</nav>'),(13,'bootstrap-> 区域标题（标题下方带一横线，字体可用hx设置大小 ）','\n\n<div class=”page-header“>\n	<h1>aaaaaaaa</h1>\n</div>'),(14,'bootstrap-> 提示条（四种颜色）','\n\n<div class=\"alert alert-success\">\n<b>this</b> is a dog!\n</div>\n\n<div class=\"alert alert-info\">\n<b>this</b> is a dog!\n</div>\n\n<div class=\"alert alert-warning\">\n<b>this</b> is a dog!\n</div>\n\n<div class=\"alert alert-danger\">\n<b>this</b> is a dog!\n</div>'),(15,'bootstrap-> 进度条（七种样式）','\n\n<div class=\"progress\">\n<div class=\"progress-bar\" style=\"width: 90%;\"></div>\n</div>\n\n<div class=\"progress\">\n<div class=\"progress-bar progress-bar-success\" style=\"width: 90%;\"></div>\n</div>\n\n<div class=\"progress\">\n<div class=\"progress-bar progress-bar-info\" style=\"width: 90%;\"></div>\n</div>\n\n<div class=\"progress\">\n<div class=\"progress-bar progress-bar-warning\" style=\"width: 90%;\"></div>\n</div>\n\n<div class=\"progress\">\n<div class=\"progress-bar progress-bar-danger\" style=\"width: 90%;\"></div>\n</div>\n\n<div class=\"progress\">\n<div class=\"progress-bar progress-bar-striped\" style=\"width: 90%;\"></div>\n</div>\n\n<div class=\"progress\">\n<div class=\"progress-bar progress-bar-striped\" style=\"width: 10%;\"></div>\n<div class=\"progress-bar progress-bar-info\" style=\"width: 20%;\"></div>\n<div class=\"progress-bar progress-bar-warning\" style=\"width: 30%;\"></div>\n</div>'),(16,'bootstrap->  坚排式列表组','\n\n\nlist-group-item  列表元素\nlist-group-header  元素中的头（可选）\nlist-group-text		元素内容（可选）\n\n<div class=\"list-group\">\n<a href=\"#\" class=\"list-group-item\">aaa</a>\n<b class=\"list-group-item active\">aaa</b>\n<i class=\"list-group-item\">aaa</i>\n\n<a class=\"list-group-item\">\n<h3 class=\"list-group-header\">this is the title</h3>\n<p class=\"list-group-text\">Donec id elit non</p>\n</a>\n</div>');
/*!40000 ALTER TABLE `bootstrap` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `javascript`
--

DROP TABLE IF EXISTS `javascript`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `javascript` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `ch` varchar(9999) DEFAULT NULL,
  `en` varchar(9999) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `javascript`
--

LOCK TABLES `javascript` WRITE;
/*!40000 ALTER TABLE `javascript` DISABLE KEYS */;
INSERT INTO `javascript` VALUES (1,'JS-> JS 使用 name 获取元素或获取表单项的值 ','\nvar p1=document.getElementsByName(\"price1\")[0];'),(2,'JS-> JS 通过类名获取元素及属性','\n\nvar sp=document.getElementsByClassName(\"sihanplug\");\n	\nalert(sp[0].name);'),(3,'JS-> JS 通过 name获取表单及其元素','\n\n<form action=\"\" name=\"myform\" onsubmit=\"return doAdd()\">\n\n结 果：<input type=\"text\" name=\"res\" readonly style=\"border:0px;\"/>\n\n<input type=\"button\" value=\"求和\" onclick=\"doAdd()\"/>\n</form>\n\ndocument.myform.res.value=str;	\n\n//通过表单name myform 获取 元素 name 为res的元素，并设置其值'),(4,'JS-> JS 获取文件后缀名\nJS函数 获取某字符最后一次出现的位置\nJS函数 获取字串长度\nJS函数 截取从指定下标到指定下标区间的字符','\n\n  \nvar filename=\"www/data/index.php\";  \nvar index1=filename.lastIndexOf(\".\");  \nalert(index1);  \nvar index2=filename.length;alert(index2);  \nvar postf=filename.substring(index1,index2);//后缀名  \nalert(postf);'),(6,'JS-> JS函数 获取字串或数组长度\nJS函数 创建数组\nJS函数 将字串以指定字符分割为数组','\n\nvar arr = new Array();\nvar str = \"jpg,png,gif\";\nalert(str.length);\narr = str.split(\",\");\n\nfor(var i=0;i<arr.length;i++){\n	alert(arr[i]);\n}'),(7,'JS-> JS函数 Math.floor() 向下取整\n JS函数 Math.ceil() 向上取整\n JS函数 Math.round() 四舍五入','\n\nalert(Math.floor(7/2));\nalert(Math.ceil(7/2));\nalert(Math.round(7/3));'),(15,'JS-> php与js 通讯的通用转码','\n\n两种语言都转码成url编码格式就可以通用了\n\n在JS中使用 encodeURIComponent(str) 或 decodeURIComponent(str) 来编解码成 url编码格式\n\n在PHP中使用 urlencode(str) 或 urldecode(str) 来编解码成url编码格式\n\n这样php和JS的通讯就可以申通无阻了\n\n例如 ：\n在JS中使用encodeURIComponent() 进行编码，在PHP中使用 urldecode() 来进行解码 \n或\n在PHP中使用urlencode() 来编码，在JS中使用decodeURIComponent() 来进行解码');
/*!40000 ALTER TABLE `javascript` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `linux_commend`
--

DROP TABLE IF EXISTS `linux_commend`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `linux_commend` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `ch` varchar(9999) DEFAULT NULL,
  `en` varchar(9999) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=258 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `linux_commend`
--

LOCK TABLES `linux_commend` WRITE;
/*!40000 ALTER TABLE `linux_commend` DISABLE KEYS */;
INSERT INTO `linux_commend` VALUES (1,'PHP->数组或对象与json字串的转换','\n\njson_encode() 将对象或数组转成json字串\n$b = json_encode($o);\n\n\njson_decode() 将json字串转成对象或数组。\n\n$c = json_decode($str);		\n//不带true，转对象，\n\n$c = json_decode($str,true);	\n//带true 转数组'),(2,'PHP->BASE64 编码,可让中文在网络顺利传输','\n\n$b = base64_encode($a);  编码\n\n	\n$c = base64_decode($b);  解码'),(3,'PHP->PHP清除缓冲区内容','\n\nob_clean()'),(4,'PHP->获取传输过来的xml或其它php不识别的原型数据','\n\n\n$GLOBALS[\"HTTP_RAW_POST_DATA\"]'),(6,'PHP->将xml转成对象','\n\n$obj = simplexml_load_string($xml,\"SimpleXMLElement\",LIBXML_NOCDATA);\n\nLIBXML_COMPACT - 激活节点的优化配置（可加速应用程序）\nLIBXML_DTDATTR - 设置默认的 DTD 属性\nLIBXML_DTDLOAD - 装载额外的子集\nLIBXML_DTDVALID - 验证 DTD 有效性\nLIBXML_NOBLANKS - 删除空节点\nLIBXML_NOCDATA - 将 CDATA 设置为文本节点\nLIBXML_NOEMPTYTAG - 扩展空标签（例如 <br/> 到 <br></br>），仅在 DOMDocument->save() 和 DOMDocument->saveXML() 函数中有效\nLIBXML_NOENT - 替代实体\nLIBXML_NOERROR - 不显示错误报告\nLIBXML_NONET - 装载文档时停止访问网络\nLIBXML_NOWARNING - 不显示警告报告\nLIBXML_NOXMLDECL - 当存储一个文档时放弃 XML 声明\nLIBXML_NSCLEAN - 删除多余的名称空间声明\nLIBXML_PARSEHUGE - 设置 XML_PARSE_HUGE 标志，用来放宽解析器的任何强制限制。这将影响诸如文档的最大深度和文本节点大小限制等。\nLIBXML_XINCLUDE - 使用 XInclude 替代\nLIBXML_ERR_ERROR - 获取可纠正的错误\nLIBXML_ERR_FATAL - 获取致命错误\nLIBXML_ERR_NONE - 不获取错误\nLIBXML_ERR_WARNING - 获取简单警告\nLIBXML_VERSION - 获取 libxml 版本（例如 20605 或 20617）\nLIBXML_DOTTED_VERSION - 获取带点的 libxml 版本（例如 2.6.5 或 2.6.17）'),(7,'PHP->按指定日期生成时间戳','\n\nmktime(0,0,0,12,30,1999);'),(8,'PHP->显示当前或指定时间戳的日期','\n\n\n\ndate(YmdHis);  //20161026013116\n按指定格式显示当前日期\n\n\n\n$a = mktime(0,0,0,12,30,1999);\ndate(\"Y-m-d H:i:s\",$a);\n按指定格式与时间戳显示日期'),(11,'linux-> linux开机时生效的环境变量文件','\n\n/etc/profile\n/etc/profile.d/*.sh\n/etc/bashrc\n~/.bash_profile		\n//对当前用户起作用,在用户登陆时执行\n~/.bashrc		\n//对当前用户起作用，在运行一个shell时执行\n~/.bash_logout		\n//用户登出时执行的脚本'),(13,'linux-> 让程序可以全局调用','\n\n将可执行命令 链接到 /usr/local/bin 目录下  如：\nln -s /usr/local/php/bin/php /usr/local/bin/php		\n//如此 php命令即可全局使用了'),(14,'linux-> 清除内存(释放内存)','\n\n\necho 3 > /proc/sys/vm/drop_caches	\ndrop_caches的值可以是0-3之间的数字，代表不同的含义：\n0：不释放（系统默认值）\n1：释放页缓存\n2：释放dentries和inodes\n3：释放所有缓存'),(15,'linux-> ssh 远程shell登陆','\n\n\n\nssh root@192.168.198.102'),(16,'linux-> 查看历史操作命令','\n\nhistory		查看历史操作命令\n\n/home/username/.bash_history 	文件存放位置	\n\nHISTSIZE=500	设置历史操作命令的保存条数为500条'),(18,'linux-> 查看磁盘空间使用情况','\n\ndf -ah'),(19,'linux-> 查看磁盘IO情况','\n\nvmstat     只显示一次\n\nvmstat 1  间隔一秒， 不停显示，'),(20,'linux-> 查看动态的CPU，内存，进程等信息','\n\n\ntop\np	根据CPU使用量排序\nM	根据内存使用量排序\nT	根据运行时间排序\nq	退出 \n	以上参数需要在运行时输入'),(21,'linux-> 查看静态的进程统计信息','\n\nps -aux		//显示前后台指定的相关进程\n参数\na	显示前台所有进程\nu	根据指定用户相关的进程\nx	后台进程也显示\ne	显示所有的进程\n解释\n%CPU	cpu占用百分比\n%MEM	内存占用百分比\nVSZ	虚拟内存占用量\nRSS	因定内存占有量\ntty	登录终端'),(22,'linux-> 查看内存使用情况','\nfree -m 			或cat /proc/meminfo\n\n例:\n			 total       used       free     shared    buffers     cached\nMem:          7979       7897         82          0         30       3918\n-/ buffers/cache:       3948       4031\nSwap:         4996        438       4558\n\n第一行用全局角度描述系统使用的内存状况：\ntotal 内存总数\nused 已经使用的内存数，一般情况这个值会比较大，因为这个值包括了cache 应用程序使用的内存\nfree 空闲的内存数\nshared 多个进程共享的内存总额\nbuffers 缓存，主要用于目录方面,inode值等（ls大目录可看到这个值增加）\ncached 缓存，用于已打开的文件\n\n第二行描述应用程序的内存使用：\n-buffers/cache 的内存数:used - buffers - cached\nbuffers/cache 的内存数:free buffers cached\n前个值表示-buffers/cache 应用程序使用的内存大小，used减去缓存值\n后个值表示 buffers/cache 所有可供应用程序使用的内存大小，free加上缓存值\n\n第三行表示swap的使用：\nused 已使用\nfree 未使用 \n\n可用的内存=free memory buffers cached。\n为什么free这么小，是否关闭应用后内存没有释放？但实际上，我们都知道这是因为Linux对内存的管理与Windows不同，free小并不是说内存不够用了，应该看的是free的第二行最后一个值：-/ buffers/cache:       3948       4031 ，这才是系统可用的内存大小。'),(23,'linux-> 让配置文件立即生效的两种方式 ','\n\n注：当配置文件修改后想要生效有两种方式，一种是重启服务，二是使用 . 或 source \n\n\n   . file\n   source file'),(26,'linux-> 同步缓冲区与磁盘数据，将所有未写的系统缓冲区写到磁盘中','\n\nsync'),(27,'linux-> 查询某命令的位置','\n\n\nwhereis ls'),(28,'linux-> 命令行下的随机数','\n\n$RANDOM'),(30,'linux-> linux与windows间的文件的上传下载命令','\n\n\nrz 		上传文件\nsz 		下载文件\n该命令需要安装后才可使用\nyum -y install lrzsz	CentOs上安装组件\napt-get install lrzsz	Ubantu上安装组件'),(31,'linux-> 开启一个远程后端执行，不会因断网或关闭窗口而终断程序的执行','\n\n\nscreen -S lnmp\n\n需要安装 \nyum install screen 		\nCentOs上安装组件\n\napt-get install 		\nUbantu上安装组件'),(32,'linux-> 文件或目录的远程拷贝','\n\nscp /home/test/test.txt root@192.168.1.5:/home/root		将文件从本地复制到远程		\nscp root@/full.tar.gz 192.168.1.5:/home/root/full.tar.gz home/test/full.tar.gz	将文件从远程复制到本地\nscp -r local_folder remote_username@remote_ip:remote_folder		复制目录\n[root@iZ28jm7ijkbZ ~]# scp -r c.php root@dongchenggroup.cn:/home/www\nscp    	拷贝命令\n-r 	表示递归copy，若source中含有目录名，则将目录下之档案亦皆依序拷贝至目的地；\nc.php  	指定文件名也可以是*代表所有\nroot	目标主机用户名\ndongchenggroup.cn 	目标主机域名或ip\n:/home/www		目标目录\ncp 	本机上的文件拷贝\nscp 	不同机器间的文件拷贝\n-a same as -dpR 尽可能将源文件状态、权限等资料都照原装予以复制，并且是递归copy；\n-f 表示force，若目的地已经有相同档名的档案存在，则在复制前先予以删除再行复制；\n-v 和大多数 linux 命令中的 -v 意思一样 , 用来显示进度 . 可以用来查看连接、认证、 或是配置错误\n-C 使能压缩选项\n-P 选择端口 . 注意 -p 已经被 rcp 使用'),(33,'linux-> 将文件清空或重置内容','\n\n> 1.txt			清空文件\necho  111 > 1.txt	将内容存储到1.txt中(但不会显示出来)'),(34,'linux-> 追加文件内容','\n\necho \"aa\" >> 1.txt'),(35,'linux-> 使用内容反置，发送邮件','\n\nmail -s \"title\" abc@qq.com < 1.txt	将1.txt内容发送到邮件'),(36,'linux-> 将错误提示信息存储及追加到指定日志','\n\nls xxx 2>error.log	会把提示信息存储到error.log文件\nls xxx 2>>error.log	会把提示信息追加到error.log文件'),(37,'linux-> 设置后台运行，代替前个文件','\n\n\nsh xxx.sh > 1.log 2>&1		\n&1 代表前面的1.log文件\n\n\nsleep 100 &	表示后台运行'),(38,'linux-> 声明变量为当前shell的全局变量','\n\n export a=xxx'),(39,'linux-> 删除指定变量','\n\nunset a'),(40,'linux-> 进入，退出子shell','\n\nbash 进入子shell\n\nexit 退出子shell'),(41,'linux-> 可引用执行命令的一对符号','\n\n\n··\n`rm -rf `ls /test	//将ls /test 浏览到的结果 删除\nrm -rf `ls | grep -v \"1.txt\"`	删除当前目录中除1.txt 以外的所有文件'),(42,'linux-> 获取服务器负载情况','\n\n w'),(45,'linux-> 附带行号显示文件内容','\n\nnl 1.txt'),(48,'linux-> 添加用户及其3个参数','\n\nuseradd mysql -g mysql -M -s /sbin/nologin \n		\nmysql：增加一个名为 mysql的用户。\n-g：指定新用户所属的用户组(group)\n-M：不建立家目录\n-s：定义其使用的shell，/sbin/nologin代表用户不能登录系统'),(49,'linux-> cat > 结合 <<EOF  大字串   给文件添加内容','\n\n\n#!/bin/bash\ncat > 3.txt <<EOF\n<?php\n	phpinfo();\n?>\nEOF'),(50,'linux-> 开机自动运行的脚本文件和目录','\n		\n/etc/rc.local	\n该脚本中的命令会在开机时自动执行\n\n/etc/init.d/	\n该目录中的脚本会在开机时被自动执行'),(51,'linux-> 查看系统及内核 ','\n\nuname 	\n//查看系统  linux\n\nuname -r 	\n//查看内核为：2.6.32-279.el6.i686'),(54,'linux-> 设置开机自启动（图形界面）','\n\nntsysv'),(56,'linux-> 替换指定内容','\n\nls | tr \"a-z\" \"A-Z\"	//显示当前目录文件，并将所有显示的小写字母替换成大写字母\nls | tr \"m\" \"z\"'),(57,'linux-> 命令行下的计算器','\n\necho \"365+7\" |bc	//372\n\necho \"365/7\" |bc	//52\n\nbc 		//进入运算模式'),(58,'linux-> PS1 设置 linux操作提示符的变量','\n\n[root@hostname ~]#			\n//原操作提示符\n\nPS1=\"[h@u w] $\"			\n\n//修改操作提示符的显示顺序\n	h	主机名\n	u	当前用户名\n	w	当前全路径\n	W	当前目录名\n	$	用户区别标识符 \n\n[hostname@root /tmp] #			\n//修改后的操作提示符'),(60,'linux-> 查看文件行数,单词数，字节信息','\n-l:	统计行数\n-w:	统计单词个数\n-c:	统计字节数'),(61,'linux-> 排序','\n\nsort -t \":\" -k 3 /etc/passwd		//以:为界，并以第三段来排序(以ASCLL码排序方式)\n\nsort -t \":\" -k 3 -n /etc/passwd		//以数字自然排序\n\nsort -t \":\" -k 3 -n /etc/passwd | cut -d \":\" -f 3 \n//以:为界,以第三段自然排序，并只显示第三段内容\n相当于：\ncut -d \":\" -f 3 `sort -t \":\" -k3 -n /etc/passwd`\n\n-t	指定以哪个字符为界来分段\n-k	取第几段\n-n	自然排序（0-9）\n-r	倒序\n-u	去重'),(62,'linux-> 唯一（去重）','\ncut -d \":\" -f 3 1.txt | sort -nr | uniq -c\n//对1.txt文件以：分段，只显示第3段，并对第3段自然排序，去掉重复内容，且计算相同内容出现的次数\n\n-c 计算重复内容出现的次数'),(63,'linux->  将大文件分割成多个小文件','\n\n1.以行来分割\nsplit -l 10000 1.txt 	以10000行为单位来分割1.txt文件\nsplit -l 10000 1.txt a	指定分割后的文件名前缀为a\n\n2.以大小来切割\nsplit -b 100k 1.txt 	以大小100k为标准来分割1.txt 文件\nsplit -b 100k 1.txt b	指定分割的文件名前缀为b'),(65,'linux->  统计目录及文件的空间占用情况',' \n\ndu -ah /boot	查看boot目录下每个文件的大小，及所有文件目录总大小\ndu -sh /boot	只查看boot目录的总大小\ndu -sh *		查看当前目录下所有目录与文件的大小\n\n	-a:	同时统计目录和文件(总大小)\n	-h:	实际的单位(k,m等)显示大小信息\n	-s:	只统计指定文件或目录占用空间的总大小'),(66,'linux->  grep 正则','\n-A -B -C -c --color -i -n -o -r -v\n\n//- grep 的特殊匹配\n.	代表1个任意的字符\n*	代表前字符为0到多个\n?	代表前字符为0或1个(但使用时需要前面加参数 -E;如grep -E \"ro?t\" 1.txt) \n+	代表前字符为1到个(但使用时需要前面加参数 -E;如grep -E \"ro+t\" 1.txt) \n\ngrep \"mysql\" passwd	显示指定文件中匹配条件的那行内容\n//mysql:x:500:500::/home/mysql:/sbin/nologin\n\n\n//-grep 匹配时不支持直接使用+,|,()等的解决方法\ngrep \"root|mysql\" 1.txt	匹配root或mysql的\ngrep -E \"root|mysql\" 1.txt\negrep \"root|mysql\" 1.txt\n\n\ngrep -E \"(oo){1,5}\" 1.txt	匹配多字符\ngrep -E \"(oo)+\" 1.txt\ngrep \"(oo)+\" 1.txt	\negrep \"(oo)+\" 1.txt\n\n注：grep 匹配时 如 +,|,() 等不支持，请使用 -E 或 脱意符号\"\" ,或egrep来解决\n\n\n\n\ngrep -A2 \"root\" 1.txt	-A? 显示带有root的那行内容，同时也连带显示其后面的?行内容\n\ngrep -B2 \"root\" 1.txt	-B? 显示带有root的那行内容，同时也连带显示其前面的?行内容\n\ngrep -C2 \"root\" 1.txt	-C? 显示带有root的那行内容，同时也连带显示其前后各?行内容\n\ngrep -c \"root\" passwd	-c 获取指定文件中匹配条件内容的行数\n//2\n\ngrep --color -n \"root\" 1.txt	--color 给关键字添加颜色\n\ngrep -in \"root\" 1.txt  	-i 不区分大小写\n\ngrep -n \"root\" 1.txt	-n 获取匹配的那行内容并，显示行号\n\ngrep -o \"root\" 1.txt	-o  只显示匹配到的关键字\ngrep -o \"root\" 1.txt|wc -l	-o 结合wc -l 获取 root 出现的次数\n\ngrep -r \"root\" /etc	-r 遍历并匹配指定目录下所有文件的内容\n\ngrep -v \"root\" 1.txt 	-v(取反)获取文件行中不包含root 的内容\n\ngrep -q \"root\" 1.txt	-q 不显示结果的匹配，一般作为if 判断时的条件 ，虽不显示结果，但它可以作为判断时的真假条件 \n\n小案例\ngrep -n \"[0-9]\" 1.txt		获取文件中行内带有数字的内容\n\ngrep -nv \"[0-9]\" 1.txt		获取文件中行内不带数字的内容	\n\ngrep -n \"^#\" 1.txt		获取文件中行内以#开头的内容\ngrep -nv \"^#\" 1.txt		获取文件中行内不是以#开头的内容\n\ngrep -n \"#$\" 1.txt		获取文件中行内以#结尾的内容\ngrep -nv \"#$\" 1.txt		获取文件中行内不是以#结尾的内容\n\ngrep -v \"^$\" 1.txt | grep -v \"^#\" 	去除所有空行和以#开头内容的行\n\ngrep  \"^[^0-9]\" 1.txt		获取所有以非数字开头的行'),(69,'linux-> awk ','\n\n\n-F  	指定定界符\n-F [,%]	定界符可以是多个，或的关系，与正则的[]一样\nNR	行数  \nNF 	段数\n$NF 	取最后一段\n{OFS ; print $0}	打印与各段连接符\n~//  == =   >  <  	匹配与条件判断\n\n\ndf -h | awk \"[ %]+\" \"{print $5}\"	//定界符使用空格或%\n\nawk {print $1}		//awk 默认使用空格做定界符来分段\n\nawk -F \":\" \"{print $1,$2}\" 1.txt  	使用 : 将文件中每行分段，并打印每行的第1，2段\n-F 用指定字符为界分隔内容, \nprint 打印输出\n$1,$2 指定输出第几段内容\n\n\nawk -F \":\" \"$1 ~ /root/\" 1.txt		使用: 将文件每行分段，显示第1段中匹配root的那行\n$1 	使用第一段\n~ /root/	指定要匹配的内容为root\n\n\nawk -F \":\" \"$1~/root/ {print $3,$4}\" 1.txt	使用：将文件每行分段，将第一段中包含root的那行的第3，4段打印\n$1~/root/ 	在第一段中匹配root\nprint $3,$4	打印3，4段\n\n\nawk -F \":\" \"$1~/root/ {OFS=\"--\";print $1,$2}\" 1.txt\n使用：将文件每行分段，将第一段中包含root的那行的第1,2段打印,并且使用 -- 来连接1,2段，默认使用空格做连接\n\n\nawk -F \":\" \"$1==\"root\" {print $1,$2}\" 1.txt	$1==\"root\"精准匹配（非包含）\n\nawk -F \":\" \"NR>25 {print $1,$2}\" 1.txt		NR 代表行数\n\nawk -F \":\" \"$1==\"root\" || NR>28 {print $1,$2}\" 1.txt	分段，并1段精准匹配root或行号大于28的，打印第1，2段\n\nawk -F \":\" \"$1=$3*$4  {print}\" 1.txt		$1=$3*$4用3，4段的积赋值给第一段\n\nawk -F \":\" \"NF>3\" 1.txt	 	匹配分割后，段数大于3的行	\nNF 代表段数'),(70,'linux-> 时间操作','\n\ndate +%Y		四位的年份 2016		y 两位年份   16\n\ndate +%m		两位的月份 10		n 带中文月分 10月\n\ndate +%d		两位的天   09\n\ndate +%H		时（24制） 22\n\ndate +%M		分钟	   53\n\ndate +%S		秒	   33\n\ndate +%w		周几	   1		W 一年的第几周  24\n\ndate +%s		获取当前日期的时间戳	1476021710\n\ndate -d @1476021710	将时间戳转换成日期	2016年 10月 09日 星期日 22:01:50 CST\n\ndate -d \"-1 day\"	显示昨天的时期		2016年 10月 08日 星期六 22:24:45 CST\n\ndate -d \"2 hours ago\" +$s	获取两个小时以前的时间戳\n\n\n显示昨天,明天,上周,下周,上月，下月，去年，明年的日期，并按指定格式显示年月日时分秒及简写\n\n昨天，明天\ndate -d \"-1 day\" +\"%Y-%m-%d %H:%M:%S\"		2016-10-09 22:34:28\ndate -d \"+1 day\" +\"%Y-%m-%d %H:%M:%S\"\n上周，下周\ndate -d \"-1 week\" +\"%Y-%m-%d %H:%M:%S\"\ndate -d \"+1 week\" +\"%Y-%m-%d %H:%M:%S\"\n上月，下月\ndate -d \"-1 month\" +\"%Y-%m-%d %H:%M:%S\"\ndate -d \"+1 month\" +\"%Y-%m-%d %H:%M:%S\"\n去年，明年\ndate -d \"+1 year\" +\"%Y-%m-%d %H:%M:%S\"\ndate -d \"+1 year\" +\"%Y-%m-%d %H:%M:%S\"\n\n\n简写显示昨天,明天,上周,下周,上月，下月，去年，明年的日期\n昨天，明天\ndate -d \"-1 day\" +\"%F %T\"\ndate -d \"+1 day\" +\"%F %T\"\n上周，下周\ndate -d \"-1 week\" +\"%F %T\"\ndate -d \"+1 week\" +\"%F %T\"\n上月，下月\ndate -d \"-1 month\" +\"%F %T\"\ndate -d \"+1 month\" +\"%F %T\"\n去年，明年\ndate -d \"-1 month\" +\"%F %T\"\ndate -d \"+1 month\" +\"%F %T\"\n\n\n简写显示当前日期的年月日\ndate +%F		2016-10-09\n\n简写显示当前日期的时分秒\ndate +%T		22:13:15\n\n		\n简写样式显示当前日期\ndate +%F\" \"%T		2016-10-09 22:14:50	\ndate +\"%F %T\"\n\n自定义样式显示日期\ndate +\"%Y_%m_%d %H:%M:%S\"   	2016_10_09 22:17:19\n\n\necho `date +%Y%m%d%H%M%S` | xargs mkdir		创建以时间为名的动态目录\necho `date +%Y%m%d%H%M%S` | xargs touch		创建以时间为名的动态文件\nmysqldump -uroot -pxiaOdonGsIguO32906802 test2 > /test/`date +%Y%m%d%H%M%S`.sql			为mysql备份时创建动态文件名\n\ndate -s //设置当前时间，只有root权限才能设置，其他只能查看。\ndate -s 20080523 //设置成20080523，这样会把具体时间设置成空00:00:00\ndate -s 01:01:01 //设置具体时间，不会对日期做更改\ndate -s “01:01:01 2008-05-23″ //这样可以设置全部时间\ndate -s “01:01:01 20080523″ //这样可以设置全部时间\ndate -s “2008-05-23 01:01:01″ //这样可以设置全部时间\ndate -s “20080523 01:01:01″ //这样可以设置全部时间\n\n//date 参数大全\n\ndate 用法： date [OPTION]... [+FORMAT]\ndate [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]\ndate 可以用来显示或设定系统的日期与时间。\n1.在显示方面，使用者可以设定欲显示的格式，格式设定为一个加号后接数个标记，其中可用的标记列表如下: % :  打印出 %\n%n : 下一行\n%t : 跳格\n%H : 小时(00..23)\n%I : 小时(01..12)\n%k : 小时(0..23)\n%l : 小时(1..12)\n%M : 分钟(00..59)\n%p : 显示本地 AM 或 PM\n%r : 直接显示时间 (12 小时制，格式为 hh:mm:ss [AP]M)\n%s : 从 1970 年 1 月 1 日 00:00:00 UTC 到目前为止的秒数\n%S : 秒(00..61)\n%T : 系统格式的时分秒	15:49:49\n%X : 相当于 %H:%M:%S\n%Z : 显示时区 %a : 星期几 (Sun..Sat)\n%A : 星期几 (Sunday..Saturday)\n%b : 月份 (Jan..Dec)\n%B : 月份 (January..December)\n%c : 直接显示日期与时间\n%d : 日 (01..31)\n%D : 直接显示日期 (mm/dd/yy)\n%h : 同 %b\n%j : 一年中的第几天 (001..366)\n%m : 月份 (01..12)\n%U : 一年中的第几周 (00..53) (以 Sunday 为一周的第一天的情形)\n%w : 一周中的第几天 (0..6)\n%W : 一年中的第几周 (00..53) (以 Monday 为一周的第一天的情形)\n%x : 直接显示日期 (mm/dd/yy)\n%y : 年份的最后两位数字 (00.99)\n%Y : 完整年份 (0000..9999)\n%F : 系统格式的年月日 	2016-09-04'),(72,'linux-> shell脚本的执行方式','\n			./filename.sh		执行方式\n			或\nsh filename.sh\n			或\nbash filename.sh\n\n注：执行脚本的时候，要先将脚本文件的属性改为可执行的：chmod +x filename.sh'),(74,'linux-> 交互式脚本','\n#!/bin/bash\nread -p \"请输入一个数字:\" num\necho $num\n\n或\n\n#!/bin/bash\nread -p \"请输入一个数字:\"\necho $REPLY		//系统内置交互变量'),(75,'linux-> 内置变量$*,$#,$0,$1,$2,$?,##*','\n\n//$1,$2..$*,$#		\n编辑脚本并运行\n#!/bin/bash\necho \"$1=\"$1\necho \"$2=\"$2\necho \"$3=\"$3\necho \"$#=\"$#\necho \"$0=\"$0\necho $*\n\n\n运行脚本后显示结果\n[root@tpcwreLinux tmp]# sh a.sh aming linux\n$1=aming\n$2=linux\n$3=\n$#=2\n$0=a.sh\n\n注解：\n$1 代表执行脚本时所带的第一个参数aming\n$2 代表执行脚本时所带的第二个参数linux\n$3 代表第三个参数，，，依次类推\n$# 代表参数的总个数,这里是两个参数，所以就是2\n$0 代表执行脚本a.sh的本身\n$* 代表所有的参数\n\n\n//##*\n${1##*.tar.} 表示第一个参数去掉*.tar.后剩下的部分。\n\n\n//$?\n$? 是上一个程序执行是否成功的标志，如果执行成功则$? 为0，否则 不为0'),(76,'linux-> 变量的调用与声明','\n\nname=\"lily\"		\n//定义变量时，变量名不加美元符号，且变量名和等号之间不能有空格\n\nfor file in `ls /etc`	//遍历/etc目录下文件名并赋值给变量file\n					\n//调用变量\necho $name		\necho ${name}		\necho \"I am good at ${skill}Script\"'),(77,'linux-> 拼接字串','\na=\"a\"\nb=\"b\"\necho $a$b'),(78,'linux-> 获取字串长度','\n\na1=\"abcde\"\na2=\"hijklmn\"\necho ${#a1}\necho ${#a2}'),(79,'linux->  截取字串 ','\nstring=\"alibaba is a great company\" \necho ${string:1:4} 			//输出：liba'),(80,'linux->  变量的计算','\na=1; b=2	\nc=$[$a+$b];		\nc=$(($a+$b))'),(81,'linux->  查找子字串','\nstring=\"alibaba is a great company\" \necho `expr index \"$string\" is`		//8，这个语句的意思是：找出单词is在这名话中的位置\n更多字串查找操作：http://tldp.org/LDP/abs/html/string-manipulation.html'),(83,'linux->  将之脚本中之后所有产生的输出都定向到指定日志中','\n\n#!/bin/bash\nd=`date +%F`\nexec > ${d}.log 2>&1\necho \"Begin at `date`\"\nls /etc\nls /etc/sldfjls\necho \"End at `date`\"'),(84,'linux->  if 判断','\n\n特例1：\n[ -d /usr/local/mysql ] 	//判断目录是否存在 （简便式if判断）\n\n例一：\n#!/bin/bash\nif :			// ：代表真的意思  \nthen\necho true\nfi\n\n例二：\na=2\nif [ $a == 1 ]		// 方括号中的两边和==必须有空格\nthen\necho \"true\"\nelse\necho \"false\"\nfi\n\n例三：\n#!/bin/bash\na=1\nif [ $a -gt 2 ]\nthen\necho \"大于2\"\nelif [ $a == 2 ]\nthen\necho \"等于2\"\nelse\necho \"小于2\";\nfi\n\n\n\n例五\nif [ $a -gt 1 ] && [ $a -lt 10 ];then echo \"ok\"; fi\n\nif [ $a -gt 1 ] || [ $a -lt 10 ];then echo \"ok\"; fi\n\nif [ $a -gt 1 -a $a -lt 10 ];then echo \"ok\"; fi\n\nif [ $a -gt 1 -o $a -lt 10 ];then echo \"ok\"; fi\n\n\n例六：输入一个值，判断是否为数值，并判断其是奇偶数\n#!/bin/bash\nread -p \"输入一个数字：\" n\nn1=`echo ${n} | grep \"[^0-9]\" -c`\nif [ ${n1} == 1 ]\nthen\necho \"请输入一个数字\"\nexit 1\nfi\nn2=$[$n%2]\nif [ $n2 == 1 ]\nthen\necho \"输入的是奇数！\"\nelse\necho \"输入的是偶数\"\nfi\n\n例七：\nif [ -e 1.sh ]; then echo \"exist\"; fi\n\n或\n\n[ -f 1.sh ] && echo \"exist\"\n[ -f 1.sh ] || echo \"no exist\"\n\n\n\n\n例八：  非\n\nif [ ! -e 1.sh ]; then echo \"no exist\"; fi\n\n\n\n例九： if语句中可以使用命令执行的结果来做条件\n\nif echo $n | grep -q \"[^0-9]\"		//如果匹配到了非数字，则执行下面的语句\nthen\necho \"请输入纯数字\"\nexit 1\nif\n\n\nif ls /etc/lakdsf > 1.log 2>1.log ;then echo \"ok\" ;else echo \"not ok\"; fi\n\n\nline=`wc -l 4.txt|cut -d \" \" -f1`;	//获取4.txt文件的行数，单词数，大小信息，并将结果以空格分隔，再取第1段（也就是行数），将其赋值给变量line\nif [ $line -lt 3 ]; then echo \"no\"; fi	//判断line是否大于3 ，成立就显示no\n\n\n\n//判断条件\n\n[ $a == 3 ] 或 [ $a eq 3 ]	等于\n\n[ $a -ne 3 ]	-ne 不等于\n\n[ $a -lt 3 ]  	-lt 小于\n\n[ $a -gt 3 ]	-gt 大于\n\n[ $a -ge 3 ]	-ge 大于等于\n\n[ $a -le 3 ]	-le 小于等于\n\n[ -e \"$fiel\" ]	判断文件或目录是否存在 \n\n[ -f \"$file\" ] 	判断$file是否是一个文件\n\n[ -d \"$file\" ] 	判断$file是否是一个目录\n\n[ -x \"$file\" ] 	判断文件是否有可执行\n\n[ -r \"$file\" ]  判断文件是否可读\n\n[ -w \"$file\" ]  判断文件是否可写\n\n[ -n \"$a\" ] 	判断变量$a是否有值\n\n[ -z \"$a\" ]	判断变量是否为空\n\n[ ! -z \"$a\"] 	判断变量不为空\n\n[ \"$a\" = \"$b\" ] 判断$a和$b的取值是否相等\n\n[ cond1 -a cond2 ] 判断cond1和cond2是否同时成立相当于and，-o表示cond1和cond2有一成立,相当于or\n\n要注意条件测试部分中的空格。在方括号的两侧都有空格，在-f、-lt、=等符号两侧同样也有空格。如果没有这些空格，Shell解释脚本的时候就会出错。\n\nexec >1.log 2>&1	将以后所有的输出定向到指定文件'),(85,'linux->  case 判断 ','\n\n#!/bin/bash\nread -p \"请输入一个值：\" n\ncase $n in\n1)\necho \"星期一\"\n;;\n2)\necho \"星期二\"\n;;\n3)\necho \"星期三\"\n;;\n4)\necho \"星期四\"\n;;\n5)\necho \"星期五\"\n;;\n6|7)\necho \"大礼拜\"\n;;\n*)\necho \"请办入一个1-7的数字\"\n;;\nesac'),(87,'linux->  for 循环','\n\n例一：\nfor i in `seq 1 10000`; 		//循环1万次\ndo cat /etc/passwd >> 1.txt; 		//每次将指定文件内容追加到1.txt\ndone					//结束\n\n\n例二：  将文件中每行遍历打印出来（行中包含空格或tab的）\n#!/bin/bash\nf=\"1.txt\"\nn=`wc -l $f|awk \"{print $1}\"`\nfor i in `seq 1 $n`\ndo\n	sed -n \"${i}p\" $f\ndone\n\nseq	序列：指定循环的节奏\nseq 1 10 	循环1-10\nseq 1 2 10 	循环1-10 ，步长为2\nseq -1 -1 -10   \n\n\n例三：\nfor ((i=0; i<10; i++))\ndo \ntouch test_$i.txt 		\ndone'),(89,'linux->  函数','\n\n例一：\n#!/bin/bash	\ninput (){		//声明一个函数，名字是input \n	echo $1		//打印出该函数的第一个参数\n}\ninput aaaaa		//调用函数并，给了一个参数为 aaaaa\n\n\n例二：\n#!/bin/bash\ngip (){			//函数的声明\n	ip=`ifconfig | grep -A1 \"$1\" | tail -1 | awk \"{print $2}\" | awk -F \":\" \"{print $2}\"`\n	if echo $ip | grep -q \"[0-9]\"\n	then\n		echo \"address is $ip\"\n	else\n		echo \"没有您所输入的网卡型号！请重新输入！\"\n	fi\n}\ngip $1		//函数的调用，并将脚本的第一个参数传递给了函数作为第一个参数 。'),(94,'mysql-> 查询mysql 各日志存储位置及状态','\n\nmysql> show variables like \"log_%\";'),(95,'mysql-> mysql 设置 binlog 日志存储位置','\n\n找到 mysql运行时使用的配置文件（默认为/etc/my.cnf）\n修改 [mysqld] 区块 下的  log-bin= 路径 即可，如下 ：\n\nlog-bin=/usr/local/mysql/log/m-bin'),(97,'mysql-> mysql 使用备份文件恢复数据库','\n\nmysql -uroot -p 	//先登陆mysql\n\nsource /usr/local/mysql/logzip/full.sql\n\n//使用备份文件恢复数据库'),(100,'linux-> zip gz bz2 压缩和解压缩','\n\nzip,unzip 压缩和解压文件或目录\nzip 压缩后保留源文件\nzip yum.zip yum.log	压缩文件\nzip -r zuan.zip zuan/	压缩目录\nunzip yum.zip		解压\n\n\ngzip,gunzip 将文件以gz格式压缩或解压 (只能压缩文件)\n压缩后不保留源文件\ngzip 1.txt		压缩\ngzip -9 1.txt		高比压缩\ngzip -d c.gz		解压\ngunzip b.gz		解压\n\n\nbzip2,bunzip2 将文件以bz2格式压缩或解压 (只能压缩文件)\n压缩后不保留源文件\nbzip2 b			压缩\nbzip2 -9 abc.txt	高比压缩压\nbzip2 -d b.bz2		解压\nbunzip2 abc.txt.bz2	解压\n\n\n-9,-d 参数解释\n-9: 表示高压缩比，多在创建压缩包时用，\n-d: 用于解压文件'),(101,'linux-> crontabs 计划任务的使用','\n\nyum search crontab		查找crontab 的 yum 源\n\nyum -y install crontabs		安装 crontab\n\nservice crond start	//启动计划任务\nservice crond stop 	//关闭服务\nservice crond restart 	//重启服务\nservice crond reload 	//重新载入配置\nservice crond status	//查看运行状态\n\ncrontab -e 			编辑任务\n-e	执行文字编辑器来编辑crontab，内定的文字编辑器是VI\n-r	删除目前的crontab\n-l	列出目前的crontab(查看专用)\n-i	会和-r 配合使用，在删除当前的crontab时询问，输入y 则删除\n\n\n* * * * * .....		\n分，时，日，月，周	命令\n\n\ncrontab特殊的符号说明：\n“*”代表所有的取值范围内的数字。特别要注意哦！\n“/”代表每的意思，如”*/5″表示每5个单位\n“-”代表从某个数字到某个数字\n“,”分散的数字\n\n示例\n30 21 * * * 表示每晚的21:30\n45 4 1,10,22 * * 表示每月1、10、22日的4 : 45\n10 1 * * 6,0 表示每周六、周日的1 : 10\n0,30 18-23 * * * 表示在每天18 : 00至23 : 00之间每隔30分钟\n0 23 * * 6 表示每星期六的11 : 00 pm\n* */1 * * * 每一小时\n* 23-7/1 * * * 晚上11点到早上7点之间，每隔一小时\n* 8,13 * * 1-5 从周一到周五的上午8点和下午1点\n0 11 4 * mon-wed 每月的4号与每周一到周三的11点\n0 4 1 jan * 一月一号的4点'),(102,'linux->  while 循环','\n\n\n\n关键字：\nwhile\n:		:代表真的意思\ndo\ndone\nread line   读取每行并将其赋给变量line\ncontinue	路过当次循环\nbreak		结束整个while循环\nexit 		结束整个脚本，后面的代码也不执行了\n\n\n例一：\n\nwhile :;do w;sleep;done		//无限循环，显示服务器负载情况 （监控脚本）\n:	代表真，一般 : 都使用在监控脚本中\nw	显示服务器负载情况\nsleep	睡眠（中止）\n\n\n例二： 服务器监控脚本\n#!/bin/bash\nwhile :\ndo\n	load=`w | head -1 | awk -F \"load average: \" \"{print $2}\" | cut -d. -f1`   \n	if [ $load -gt 10 ]\n	then\n			top | mail -s \"load is high: $load \" tpcwre@163.com\n	fi\n	sleep 30\ndone\n\n\n例三：无限输入交互，直到输入纯数字为止\n#!/bin/bash\nwhile :\ndo\n	read -p \"请输入一个值：\" n\n	if [ -z $n ]\n	then\n			echo \"输入内容不得为空！\";\n			continue\n	fi\n	if [ `echo $n | grep \"[^0-9]\"`  ]\n	then\n			echo \"只能输入纯数字！\";\n			continue\n	fi\n	break\ndone\necho $n\n\n\n\n\n例：\nsvn status | grep \"?\" | awk \"{print $2}\" | while read line;do svn add ${line};done;\n\nsvn status -- 该命令用于查看文件信息，其中M代表修改，？代表未知（即需要添加的文件）\n\ngrep \"?\"    -- 查找包含？的信息\n\n将svn status 的结果重定向到grep \"?\"那么得到的结果就是新增文件\n\n接下来使用awk处理字符串，awk \"{print $2}\"表示打印第二个数据，其中$0表示整行数据\n\nsvn status | grep \"?\" | awk \"{print $2}\"那么得到的结果就是文件名称了，接下来使用shell循环处理\n\nwhile read line;do svn add ${line};done; -- 读取每一行数据，然后执行svn add'),(103,'linux-> sed 正则加替换的使用','\n\n\np d -e -i -n -r s//g  a\n\n注：sed 不加-n会打印全部内容， 所以后面都要加上-n \n\nsed \"1p\" -n 1.txt		打印文件中第一行， \nsed \"1,5p\" -n 1.txt		打印1到5行\nsed \"38,$p\" -n 1.txt		打印38到结束行\n\n\nsed \"/11/a222\"  1.txt		a  表示向匹配到11内容的下行添加一段222\n\nsed \"/11/a222\"  1.txt		a  表示向匹配到11内容的下行添加一段222\n\nsed \"/root/p\" 1.txt -n		匹配包含root内容的行\n\ngrep -n \".\" 1.txt | sed \"1,5p\" -n 	打印1到5行并利用grep -n 显示行号\n\nsed \"/ro*t/p\" -n 1.txt		*代表前字符0到多\n\nsed -r \"/ro+t/p\" -n 1.txt	+代表前字符1到多，但sed中不能直接用+ 需要加脱意符号或 加-r 如grep的 -E\n	sed \"/ro+t/p\" -n 1.txt\n\nsed -r \"/ro?t/p\" -n 1.txt	?代表前字符0或1\n	sed \"/ro?t/p\" -n 1.txt\n\n\n\nsed -r \"/(oo)+/p\" -n 1.txt	sed 匹配多字符\n	sed \"/(oo)+/p\" -n 1.txt\n\n\nsed -e \"/root/p\" -e \"/mysql/p\" -n 1.txt		-e 匹配多条件 \n	或\n	sed -e \"/root/p;/mysql/p\" -n 1.txt\n	注：这里两个-e 匹配不同与 and , and 是匹配 条件1与条件2同时成立的，而这里的两个-e 是匹配到条件会打印出来，匹配到条件 2 也会打印，如果同一行时同时有root 和mysql 那么就会打印两次（匹配root打印一次，匹配mysql再打印一次）。\n\n\nsed \"/[1-8]/d\" 1.txt		d 不显示匹配到内容的行\n	sed \"1d\" 1.txt			不显示第一行	\n	sed \"2,$d\" 1.txt		不显示第2行到结束\n	sed \"1,5d\" 1.txt		不显示1到5行\n	sed -r \"/root|mysql/d\" 1.txt\n\n\nsed \"s/root/good/g\" 1.txt	s  g 替换匹配到的内容 将root替换成good\nsed \"s|root|===|\"  1.txt	s||| 只替换匹配到的首条内容\nsed \"1,5s/:/===/g\" 1.txt	只对1到5行执行替换用===替换:\nsed \"30,$s/:/===/g\" 1.txt	只对30行到最后的行执行替换\nsed \"s/[0-9]//g\" 1.txt		删除掉文件中所有的数字(就是把数字替换成空 )\nsed \"s/[^0-9]//g\" 1.txt		删除掉所有非数字\nsed \"s/[a-Z]//g\" 1.txt		删除掉所有字母\n\nsed -r \"s/([^:]+)(:.*:)([^:]+$)/321/g\"	将首段和未段调换\n	root:x:0:0:root:/root:/bin/bashmysql  调换前\n	/bin/bashmysql:x:0:0:root:/root:root  调换后\n\nsed -ri \"s/([^:]+)(:.*:)([^:]+$)/321/g\" 1.txt	-i 将匹配操作(替换)直接保存到文件'),(104,'mysql-> 使用 mysqldump 全库备份并重置binlog日志,及同时压缩备份文件','\n\nmysqldump -uroot -pxiaodong123 --single-transaction --flush-logs --master-data=2 --all-databases --delete-master-logs | gzip> /usr/local/mysql/logzip/`date +%Y%m%d%H%M%S`.sql.gz\n	\n--single-transaction	锁定事务表\n--flush-logs	刷新使用文件\n--master-data=2 \n  1：从服同步主服时完全同步\n  2：从服同步主服时要指定开始同步的节点\n--all-databases	全库备份\n--delete-master-logs	删除master 日志\n| gzip 	将备份文件直接以gzip格式压缩\n`date +%Y%m%d%H%M%S`	使用当前时间做备份文件名g/m-bin'),(105,'linux-> 使用命令行查看 mysql主从状态','\n\nmysql -uroot -paaa -e \"show slave status G\" | grep -i \"xxxx\" ...'),(106,'linux-> 剪切内容','\n\n\ncut -d \":\" -f 1 /etc/passwd		以\":’标记翦第一段\nroot\ncut -d \":\" -f 1,2 /etc/passwd		以\":’标记翦1和2段\nroot:x\ncut -d \":\" -f 1-5 /etc/passwd		以\":’标记翦1到5段\nroot:x:0\n\ncut  -c 2 /etc/passwd			剪切每行第2个字符\ncut  -c 2,5 /etc/passwd			剪切每行第2和第5的字符\ncut  -c 2-5 /etc/passwd			剪切每行第2到5的字符\ncut  -c 3- 1.txt 			剪切每行第3个字符到结束\noot:\n-d 	指定分隔符，不指定时默认分隔符为空格\n-f	指定翦几段\n-c	指定要剪切字符的下标区域'),(108,'linux-> 显示打印内容及其两个参数','\n\necho -x ....\n\necho the STRING(s) to standard output.\n\n-n     让输出的文字不换行。\n\n-e     当字串中出现以下字符时，会特别处理\n\\a 	发出警告声\n\\b	删除前一个字符\n\\c	最后不加上换行符号 \n\\f	换行，但光标留在原来位置\n\\v	与f相同\n\n\\n     换行且光标移至行首\n\\t	插入tab\n\\	插入 \\\n\n\\nnn	插入nnn(八进制)代表的ASCLL字符\n\n另 echo 也可在脚本循环中当作换行来使用'),(109,'linux-> 将文件内容显示的同时并存储到指定文件中','\n\n echo 333333333 | tee 3.txt'),(111,'JS-> input,select,textarea 内容改变事件及获取改变后的值','\n<input id=\"a\" name=\"a\" />\n<select id=\"b\">\n<option>1</option>\n<option>2</option>\n<option>3</option>\n</select>\n<textarea id=\"c\" ></textarea>\n<script>\nvar a = document.getElementById(\"a\");\na.onchange=function(){\n	alert(this.value);\n}\n\nvar b = document.getElementById(\"b\");\nb.onchange=function(){\n	alert(this.value);\n}\nvar c = document.getElementById(\"c\");\nc.onchange=function(){\n	alert(c.value);\n}\n</script>'),(112,'mysql-> 视图操作','\n\n//视图详解 \n\n//语法\ncreate algorithm=算法 view 视图名 as select语句 with 更新条件\n\nalgorithm = undefined | merge | temptable 		可选\nundefined	MySQL将自动选择所要使用的算法\nmerge		将视图的语句与视图定义合并起来，使得视图定义的某一部分取代语句的对应部分\ntemptable	将视图的结果存入临时表，然后使用临时表执行语句\n\n\nview 视图名			必选\n\nas select 语句			必选\n\nwith CASCADED check option	可选\nWITH CHECK OPTION表示更新视图时要保证在该试图的权限范围之内（可选参数）\nCASCADED：更新视图时要满足所有相关视图和表的条件\nLOCAL：更新视图时，要满足该视图本身定义的条件即可\n\n\n//示例三表关联视图\ncreate algorithm=merge view tp_perm_lan_view(id,name,addr,pid1,name1,pid2,name2) as select l3.id,l3.name,l3.addr,l3.pid1,l1.name name1,l3.pid2,l2.name name2 from ((tp_perm_lan3 l3 join tp_perm_lan2 l2) join tp_perm_lan1 l1) where ((l3.pid2 = l2.id) and l3.pid1 = l1.id);\n\n//带排序 \ncreate algorithm=merge view tp_perm_lan_view(id,name,addr,pid1,name1,pid2,name2) as select l3.id,l3.name,l3.addr,l3.pid1,l1.name name1,l3.pid2,l2.name name2 from ((tp_perm_lan3 l3 join tp_perm_lan2 l2) join tp_perm_lan1 l1) where ((l3.pid2 = l2.id) and l3.pid1 = l1.id) order by l3.pid1 asc;\n\n\n//带with条件，更新视图时要满足所有相关视图和表的条件\ncreate algorithm=merge view tp_perm_lan_view(id,name,addr,pid1,name1,pid2,name2) as select l3.id,l3.name,l3.addr,l3.pid1,l1.name name1,l3.pid2,l2.name name2 from ((tp_perm_lan3 l3 join tp_perm_lan2 l2) join tp_perm_lan1 l1) where ((l3.pid2 = l2.id) and l3.pid1 = l1.id) with CASCADED check option;'),(116,'PHP-> 获取浏览器相关信息的字串,关判断浏览器是否为IE类型','\n\necho $_SERVER[\"HTTP_USER_AGENT\"].\"<BR>\";\n\nif (strpos($_SERVER[\"HTTP_USER_AGENT\"], \"MSIE\") !== FALSE) {\n	echo \"正在使用 Internet Explorer。<br />\";\n}else{\n	echo \"正在使用非IE\";\n}'),(117,'nginx->  包含多级子配置文件,重新指定服务根目录并绑定多域名及重写URL示例','\n\nnginx.conf 主配置页面\nserver {\nlisten 80;\nserver_name _;\naccess_log /data/wwwlogs/access_nginx.log combined;\nroot /data/wwwroot/default;\nindex index.html index.htm index.php;\ninclude vhost/in2.conf;		//引入子配置\n}\n\n\nin2.conf 子配置页面\nserver {\nlisten 80;\nserver_name test.tobeyoung.net;		//绑定域名，每个配置文件中可以绑不同域名，来达到绑定多域名\nroot /data/wwwroot/test.tobeyoung.net;	//绑定访问根目录：当访问上面的域名时会自动访问这个目录\naccess_log /data/wwwlogs/test.tobeyoung.net_nginx.log combined;\nindex index.html index.htm index.php;\ninclude thinkphp.conf;	//引入重写规则配置文件\n}\n\n\nthinkphp.conf 子配置文件\nlocation / {\nif (!-e $request_filename) {\n	rewrite ^(.*)$ /index.php?s=$1 last;	\n	break;\n}\n}'),(118,'linux->  给命令传递参数的过滤器，组合多个命令的工具','\n\nls | xargs      将所有内容显示在一行，默认全用空格定界\n\nls | xargs -d: -n3  使用:为定界符每三段一换行\n\n\nls | xargs -I {} echo --{}===    \n  -I 将前面每行内容赋值给{} 然后调用\n\n\nls | xargs -i echo --{}===  同 I 但省略了前面 的{}'),(119,'JS-> js字串,对象转换的两个函数','\n\n\nJSON.parse(str);  //将字串解析成对象\n\n\n\nJSON.stringify(obj);   //将对象解析成字串'),(120,'PHP->   获取数组当前指针元素的key和值 的两个函数','\n\n\nkey($arr);  //获取当前指针元素的key \n\ncurrent($arr); //获取当前指针元素的值'),(121,'PHP->   获取数组当前指针指向首个或尾个元素','\n\nreset($arr);   //指向首个元素,\n\n\nend($arr);   //指向最后一个元素'),(122,'PHP-> 将数组元素指针下移，或上移','\n\n\nnext($arr); 将指针下移并返回该值，移到末尾时会反回false\n\n\nprev($arr); 将指针上移并返回该值，移到首元素后会返回false'),(123,'PHP-> list,each结合while遍历数组','\n\n$arr=array(\"a\"=>\"aa\",\"b\"=>\"bb\",\"c\"=>\"cc\");\n\nwhile(list($k,$v)= each($arr)){\n	echo $k.\"-\".$v.\"<br>\";\n}'),(124,'PHP-> 数组去重','\n\n$arr = array(1,2,3,1,2,3);\n$arr2 = array_unique($arr);\nprint_r($arr2);'),(125,'PHP-> 删除数组或元素','\n\n$arr = array(1,2,3,1,2,3);\nprint_r($arr);\necho \"<br>\";\nunset($arr[3]);\nprint_r($arr);'),(126,'PHP-> 从数组头部删除或添加一个元素','\n\n\narray_shift($arr)    从头部删除一个元素\n$arr = array(1,2,3,1,2,3);\nprint_r($arr);\necho \"<br>\";\narray_shift($arr);\nprint_r($arr);\n\n\n\narray_unshitf($arr,val)  从头部添加一个元素\n$arr = array(1,2,3,1,2,3);\nprint_r($arr);\necho \"<br>\";\narray_unshift($arr,8);\nprint_r($arr);'),(127,'PHP-> 从数组尾部部删除或添加一个元素','\n\narray_push($arr,val)  从尾部添加一个元素\n$arr = array(1,2,3,1,2,3);\nprint_r($arr);\necho \"<br>\";\narray_push($arr,8);\nprint_r($arr);\n\n\narray_pop($arr) 从尾部删除一个元素\n$arr = array(1,2,3,1,2,3);\nprint_r($arr);\necho \"<br>\";\narray_pop($arr);\nprint_r($arr);'),(128,'PHP-> 将数组中的元素随机打乱','\n\n$arr = array(1,2,3,1,2,3);\nprint_r($arr);\necho \"<br>\";\nshuffle($arr);\nprint_r($arr);'),(129,'PHP-> 将数组中的键和值调换','\n\n\narray_flip($arr);\n$arr = array(\"a\"=>\"aa\",\"b\"=>\"bb\");\nprint_r($arr);\necho \"<br>\";\n$arr2 = array_flip($arr);\nprint_r($arr2);'),(130,'PHP-> 将数组元素顺序颠倒','\n\n\n$arr = array(\"a\"=>\"aa\",\"b\"=>\"bb\");\nprint_r($arr);\necho \"<br>\";\n$arr2 = array_reverse($arr);\nprint_r($arr2);'),(131,'PHP-> 用某值将数组填充到指定长度','\n\n\n	$a = array(1);\n	print_r($a);\n	echo \"<br>\";\n	$b = array_pad($a,5,\"b\");\n	print_r($b);'),(132,'PHP-> 随机返回数组中的一个key','\n\n$a = array(\"a\"=>\"aa\",\"b\"=>\"bb\",\"c\"=>\"cc\");\n$b = array_rand($a);\nprint_r($b);'),(133,'PHP-> 将关联数组中的元素转换成变量','\n\n$arr=array(\"a\"=>\"aa\",\"b\"=>\"bb\",\"c\"=>\"cc\");\nextract($arr);\necho $c;'),(134,'PHP-> 将数组的key转换大写或小写','\n\n$a = array(\"a\"=>\"aa\",\"b\"=>\"bb\",\"c\"=>\"cc\");\nprint_r($a);\necho \"<br>\";\n$b = array_change_key_case($a,1);\nprint_r($b);'),(143,'PHP-> 创建数组的六种方式（函数）','\n\n//方式一： array()\narray(1,2,3);\n\n//方式二：range()\n$arr = range(1,10);\nvar_dump($arr);\n\n//方式三：array_fill()\n$arr = array_fill(3,7,\"a\"); \n  //下标从3开始，创建7个元素，值为a\n\n//方式四：array_fill_keys();\n$a=array(\"a\",\"b\",\"c\");\n$arr = array_fill_keys($a,\"sss\");\n  //使用一个数组来当key,并指定所有元素值\n\n//方式五：array_combine()\n$a=array(\"a\",\"b\",\"c\");\n$b=array(1,2,3);\n$arr = array_combine($a,$b);\n  //两个数组，一个当key,一个当值，生成新数组\n\n//方式六：compact()\n$a=\"aa\";\n$b=\"bb\";\n$arr = compact(\"a\",\"b\");\n  //将变量a,b合并生成一个数组'),(144,'PHP-> 数组常见的九种排序函数','\n//用val排序，不保留key\nsort($arr);  \nrsort($arr); \n\n//用val排序，保留key\nasort($arr);   \narsort($arr);\n\n//用key排序\nksort($arr);\nkrsort($arr)\n\n//自然排序\nnatsort($arr);    区分大小写\nnatcasesort($arr);  不区分大小写\n\n//多维数组排序\n$Tarray = array(\n array(\"id\"=> 0,\"name\"=>\"123833\"),\n array(\"id\"=> 0,\"name\"=>\"aaa\"),\n array(\"id\"=> 0,\"name\"=>\"albabaababa\"),\n array(\"id\"=> 0,\"name\"=>\"12356\"),\n array(\"id\"=> 0,\"name\"=>\"123abc\")\n);\nforeach($Tarray as $key=>$value){\n  $long[$key]=strlen($value[\"name\"]);\n  //保存每个子元素name内容的长度\n}\narray_multisort($long,SORT_DESC,$Tarray);\n  // _ASC 升序， _DESC 降序\n\n$i=1;\nforeach($Tarray as &$v){\n $v[\"id\"]=$i; \n $i++;\n}\nvar_dump($Tarray);'),(145,'linux-> 显示系统变量的两个命令','\n\nset   显示全部系统变量\n\n\nenv   显示部分系统变量'),(146,'mysql-> 查看二进制binlog日志，并恢复指定区间的数据','\n\n\n// 查看指定日志\nmysqlbinlog m-bin.000007\n\n\n//使用指定日志恢复数据\nmysqlbinlog --stop-position=\"4947\" m-bin.000007 | mysql -uroot -p\n//用 m-bin.000007 文件恢复节点4947之前的数据\n\nmysqlbinlog --start-position=\"120\" m-bin.000007 | mysql -uroot -p	\n//用 m-bin.000007 文件恢复节点120之后的数据\n	\nmysqlbinlog --start-position=\"120\" --stop-position=\"4947\" m-bin.000007 | mysql -uroot -p\n//用 m-bin.000007 文件恢复节点120至4947之间的数据'),(148,'PHP-> 获取字串中某字符首次，尾次出现的位置','\n\n$a = \"abcdefEge\";\n\necho strpos($a,\"E\");	\n  //字符首出现位置，区分大小写\necho stripos($a,\"E\"); \n  //字符首出现位置，不区分大小写\n\necho strrpos($a,\"E\");\n  //字符最后出现位置，区分大小写\necho strripos($a,\"E\");\n  //字符最后出现位置，不区分大小写'),(149,'linux->  与case配合，产生选择列表，可让用户循环交互不退出的命令 ','\n\n\nselect com in a b c\n\n#!/bin/bash\necho \"input a number, 1:run w, 2: run top, 3: run free, 4: quit\"\necho \nPS3=\"必须输入1-4的数字\"\nselect command in w top free quit\ndo \ncase $command in \nw)\n   w;;\ntop)\n   top;;\nfree)\n   free;;\nquit)	\n   exit;;\n*)\necho \"please input a number:(1-4)\";\nesac\ndone'),(150,'PHP-> 数组比较函数，差集，交集，健值差集','\n\n$a = array(1,2,3,7,8);\n$b = array(2,3,4,5,6,8);\n\n\n$c = array_diff($a,$b);\n//array_diff() 差集：比较数组1中有，数组2中没有的\n\n$c = array_intersect($a,$b);\n//array_intersect() 交集：比较数组1，2中都有的\n\n\n$a=array(\"a\"=>\"aa\",\"b\"=>\"bb\",\"c\"=>\"cc\");\n$b=array(\"b\"=>\"bb\",\"c\"=>\"cc\",\"d\"=>\"dd\");\n\n$c = array_diff_assoc($a,$b);\n//array_assoc() 键值差集，同时比较键值，数组1中有，2中没有的'),(152,'PHP-> 过滤get,post等传值类型的函数','\n\n\nfilter(type,val);\nvar_dump(filter_has_var(INPUT_GET,\"a\"));\nvar_dump(filter_has_var(INPUT_POST,\"b\"));\nvar_dump(filter_has_var(INPUT_COOKIE,\"c\"));\n//INPUT_GET 		是否为GET传值\n//INPUT_POST 		是否为POST传值\n//INPUT_COOKIE 		是否为cookie传值 \n//INPUT_SERVER \n//INPUT_ENV'),(153,'PHP-> 过滤一个值是否匹配某格式，如邮箱，url,int,float,IP,布尔,正则匹配，去除字母等','\n\n\n//var_dump(filter_var(\"bob@example.com\", FILTER_VALIDATE_EMAIL));		\n//判断是否为一个邮箱,返回邮箱地址或false\n//var_dump(filter_var(\"http://example.com\", FILTER_VALIDATE_URL));	\n//判断是否为一个URL,返回地址或false\n//var_dump(filter_var(755, FILTER_VALIDATE_INT));						\n//判断是否为个整型数值,返回数值或false\n//var_dump(filter_var(2.5, FILTER_VALIDATE_FLOAT));		\n//判断是否为浮点数，也包含整数,返回数值或false\n//var_dump(filter_var(\"192.168.1.111\", FILTER_VALIDATE_IP));	\n//判断是否为一个IP地址，返回该IP或false\n//var_dump(filter_var(\"http://example.com\", FILTER_VALIDATE_URL, FILTER_FLAG_PATH_REQUIRED));\n//判断是否为url且为request类型\n//var_dump(filter_var(\"yes\", FILTER_VALIDATE_BOOLEAN));	\n//判断真与假，这里的真包含true,1,yes,on,其它都为假\n//var_dump(filter_var(\"the gril is builtifull\",FILTER_VALIDATE_REGEXP,array(\"options\"=>array(\"regexp\"=>\"/^a.*/\"))));\n//判断是否与正则相匹配，返回该字串或false\n//var_dump(filter_var(\"5-2f+3.3pp\", FILTER_SANITIZE_NUMBER_FLOAT,		// \"5-2+3.3\" \n//过滤掉所有字符，除了数字、+- 以及 .,eE。\n//var_dump(filter_var(\"5-2+3-3.2-pp\", FILTER_SANITIZE_NUMBER_INT));		//\"5-2+3-32-\" \n//过滤掉所有字符，除了数字和 +-\n\n//其它过滤参见w3c手册'),(157,'PHP->  将一维数组按指定长度分割成二维数组','\n\n\n//array_chunk()\n$a=array(\"aa\",\"bb\",\"cc\",\"dd\",\"ee\",\"ff\",\"gg\",\"hh\");\n$b=array_chunk($a,2); \n//每两个元素的长度分割成二维数组'),(158,'PHP-> 1，将数组用指定字符连成字串。2，将字串以指定字符分割成数组','\n\n\n//implode() 将数组合并成字串\n$a=array(\"aa\",\"bb\",\"cc\");\n$b=implode(\"-\",$a);\nprint_r($b); //aa-bb-cc\n\n\n\n//explode() 将字串拆分成数组\n$a=\"abc,def,gh,ijk\";\n$b = explode(”,“,$a);\nprint_r($b); \nArray ( [0] => abc [1] => def [2] => gh [3] => ijk )'),(159,'PHP-> 1，合并多个数组函数。2，递归合并数组','\n\n\n//array_merge() 合并多个数组：\n$a=array(\"a\"=>\"aa\");\n$b=array(\"b\"=>\"bb\");\n$c = array_merge($a,$b);\n\n\n//array_mege_recursive(); 递归合并数组\n$ar1 = array(\"color\" => array(\"favorite\" => \"red\"), 5);\n$ar2 = array(10, \"color\" => array(\"favorite\" => \"green\", \"blue\"));\n$result = array_merge_recursive($ar1, $ar2);\n结果： \nArray\n(\n    [color] => Array\n        (\n            [favorite] => Array\n                (\n                    [0] => red\n                    [1] => green\n                )\n            [0] => blue\n        )\n    [0] => 5\n    [1] => 10\n)'),(160,'PHP-> URL与数组相互转换的两个函数','\n\n\n//将数组转成url字串\nhttp_build_query(arr) \n\n$a=array(\"a\"=>\"aa\",\"b\"=>\"bb\");\n$b=http_build_query($a);\nprint_r($b);	//a=aa&b=bb\n\n\n//将url字串转成数组\nparse_str(str,array);'),(161,'PHP-> 数组中查找指定元素，返回其下标或false','\n\narray_search(val,arr);'),(162,'PHP-> 使用数组2的元素替换数组1中指定区间的元素','\n\n$a=array(1,2,3,5);\n$b=array(11,12);\n$c = array_splice($a,1,2,$b);\necho \"<pre>\";\nvar_dump($a);\n\narray(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(11)\n  [2]=>\n  int(12)\n  [3]=>\n  int(5)\n}'),(163,'PHP-> 计算数组中所有值的和','\n\n$a=array(\"d\"=>1,\"c\"=>\"aa\",\"b\"=>3,\"a\"=>5);\n$b = array_sum($a);\necho $b;	//9'),(164,'PHP-> 计算数组中所有值的乘积','\n\n$a=array(\"d\"=>1,\"c\"=>2,\"b\"=>3,\"a\"=>5);\n$b = array_product($a);\necho $b;	//30\n\n注意：数组中所有值必须都为数值，才可以计算'),(165,'PHP-> 判断数组中是否存在某值，返回真或假','\n\nin_array(val,arr);'),(166,'PHP-> 判断数组中是否存在某下标，返回真或假','\n\narray_key_exists(key,arr);'),(167,'PHP-> 获取数组中元素的个数','\n\ncount(arr);'),(168,'PHP-> 统计数组中所有值出现的次数','\n\narray_count_values($arr);'),(170,'PHP-> 1，获取数组中所有的键。2，获取数组中所有的值','\n\n$a=array(\"d\"=>1,\"c\"=>2,\"b\"=>3,\"a\"=>5);\n$b = array_values($a); //所有的值\nprint_r($b);\n$c = array_keys($a);  //所有的健\nprint_r($c);'),(171,'PHP-> 1，使用数组2的值替换数组1的值。2，递归替换','\n\n////普通替换\n$a=array(\"d\"=>1,\"c\"=>2,\"b\"=>3);\n$b = array(\"d\"=>11,\"c\"=>12,13);\n$c = array_replace($a,$b);  \nprint_r($c);\nArray\n(\n    [d] => 11\n    [c] => 12\n    [b] => 3\n    [0] => 13\n)\n	\n\n//递归替换\n$a1=array(\"a\"=>array(\"red\"),\"b\"=>array(\"green\",\"blue\"),);\n$a2=array(\"a\"=>array(\"yellow\"),\"b\"=>array(\"black\"));\necho \"<pre>\";\nprint_r(array_replace_recursive($a1,$a2));\n\nArray\n(\n[a] => Array\n	(\n		[0] => yellow\n	)\n\n[b] => Array\n	(\n		[0] => black\n		[1] => blue\n	)\n\n)'),(172,'MYSQL-> 修改SQL语句的结束符','\n\ndelimiter $$'),(173,'MYSQL-> 查看库或表的创建信息','\n\nshow create databases xxx;\n\n\nshow create table xxx;'),(174,'MYSQL-> 常规，唯一索引的删除','\n\n drop index xxx on tablename(field);'),(175,'MYSQL-> 常规，唯一索引的创建','\n\n创建常规索引\ncreate index xxx on tablename(field);\n\n\n\n创建唯一索引\ncreate unique index xxx on tablename(field)\n;'),(176,'MYSQL-> 清空指定数据表','\n\ntruncate table t1;'),(177,'MYSQL-> 1，复制表结构。2，复制表且连带数据','\n\n//复制表结构\ncreate table a like b;\n\n\n\n//复制表且连带数据\n\ncreate table a select * from b;'),(178,'MYSQL-> 向表中添加新字段的三种方式，最前，最后，指定某字段后','\n\n\n//向表中最前面添加一个新字段\nalter table t1 add age int first;\n\n\n//向表中最后添加一个新字段\nalter table t1 add age int;\n\n\n//向表中指定字段后添加一个新字段\nalter table t1 add age int after id;'),(179,'MYSQL-> 1,删除指定字段。2，删除主健。3，删除指定索引','\n\n//删除指定字段\nalter table t1 drop age;\n\n\n//删除主键\nalter table t1 drop primary key \n\n\n//删除指定索引n1\nalter table t1 drop key n1;'),(180,'MYSQL-> 修改字段名，类型，约束','\n\n\n//将字段name 改名为name1 类型为char 限制不能为空\nalter table t1 change name name1 char(32) not null;'),(181,'MYSQL-> 修改表的引擎','\n\n\nalter table t1 engine=innodb;'),(182,'MYSQL-> 数据库，表的导入，导出','\n\n导出库\nmysqldump -uroot -p dbname > path\n\n\n导出表\nmysqldump -uroot -p dbname tabname > path\n\n导出全库\nmysqldump -uroot -p --all-databases > path'),(183,'MYSQL->  windows下制做自动定时备份','\n\n1，制做mysql备份命令的文件\ndump.php 文件\n<?php\n$fname = date(\"YmdHis\");\n$com = \"E:/xampp/mysql/bin/mysqldump -uroot -p123 test t4 > c:\\$fname\";\necho exec($com);	// exec() 函数是PHP用来执行CMD 命令的一个函数 \n\n\n2，制做一个执行 php 的批处理文件 \ndump.bat\nE:xamppphpphp.exe E:xampphtdocsdump.php		\n//意为：使用php.exe 来执行 dump.php文件\n	\n3，开启计划任务，并将 dump.bat 添加到任务中运行即可。'),(185,'PHP-> php中执行cmd命令的函数','\n\n<?php\n$fname = date(\"YmdHis\");\n$com = \"E:/xampp/mysql/bin/mysqldump -uroot -p123 test t4 > c:\\$fname\";\n//使用程序mysqldump 导出指定数据表\n\necho exec($com);	\n//执行命令\n\n// exec() 函数是PHP用来执行CMD 命令的一个函数'),(186,'MYSQL-> 修改密码的两种方式','\n\n\n外部方式\nmysqladmin -uroot -p password xxx\n\n内部方式\nset password for root@\"localhost\" = password(\"xxx\")'),(188,'PHP-> 单词首字母大写，字串首字母大写，字串的大小写等四个函数','\n//-- 字串中每个单词首字母大写\n$a=\"this is a new days \";\necho ucwords($a);		//This Is A New Days \n\n//-- 字串首字母大写\n$a=\"abc\";\necho ucfirst($a);		//Abc\n\n//-- strtoupper() 将字串转为大写\n$a = \"abcdefg\";\necho strtoupper($a);		//ABCDEFG\n\n//-- strtolower() 将字串转为小写\n$a = \"ABCD\";\necho strtolower($a);		//abcd'),(189,'PHP-> 将字串中的$,^,*,(,),+,[,],.,? 前面添加反斜线','\n\n$a=\"!@#$%^&*()_+1234567890qwertyuiop[]{}|asdfghjkl;:zxcvbnm,./<>?\";\necho quotemeta($a);'),(190,'PHP-> 反斜线添加与删除的四个函数','\n\naddslashes();\nstripslashes();\naddcslashes();\nstripcslashes();\n\n//-- stripslashes() 去除字串中所有反斜线\n$a = \"\\\\\\\\0\\\\\\\\a\\\\b\\c\\de\";		\necho stripslashes($a);			\n// \\\\0\\acde\n注：去除字串中的反斜线，但每4个连续的反斜线会保留1个反斜线 \n\n\n//-- addslashes() 给 \",\",  前加反斜线\n$a=\"a\\b\\c\\\\d\\\\e-\"bb\"\";\necho $b = addslashes($a);		\n//\\a\\b\\\\c\\\\d\\\\\\e\n//注： 原有反斜线个数为奇数时才会加反斜线，原反斜线个数为偶数时不会加。\n\n\n//-- 去除字串中的反斜线，及\\r,\\n,\\v等,虽不显示，但效果还在\n$a=\"\\\\k\\\\\\\\k\\\\\\\\\\\\kva\rbckdwkf\naakkke  vvvab\r\n\";\necho stripcslashes($a);\nk\\k\\va\nbckdwkf\naakkke  vvab\n 注：每4个连续的反斜线会保留1个\n\n\n//-- 给字串中指定字符前添加反斜线 \n$a = \"anbcdefnghijklmn\";\necho addcslashes($a,\"nbh\");		\n//a\ncdef\nghijklm\n'),(191,'PHP-> 预定义字符转html实体,标签不变但失去功能及将实体字符反转的三个函数','\n\n//htmlentities()\n//htmlspecialchars() 预定义字符转html实体,标签不变但失去功能(同htmlentities)\n$a=\"<script>alert(\"a\");</script>\";\necho htmlspecialchars($a);		//<script>alert(\"a\");</script>\n将标签转为实体，标签正常显示，但失去标签的意义了测试效果和htmlentities一样，没搞明白它俩有什么区别\n	\n可用html_entity_decode() 进行实体反转\n	echo $a = \"<b>vvv</b>\";\n	echo $b = htmlentities($a);\n	echo $c = html_entity_decode($b);'),(192,'PHP-> 将字串重复指定次数','\n\n$a = \"abc\";\necho str_repeat($a,3);	\n//abcabcabc'),(193,'PHP-> 获取路径（除文件名外的路径）','\n$u = \"http:www.baidu.com/aaa/bbb/ccc/a.jpg\";\necho dirname($u);		//http:www.baidu.com/aaa/bbb/ccc'),(194,'PHP-> 对字串进行url编码和解码','\n$a = \"我是一个字符串\";\necho $b = urlencode($a);\necho $c = urldecode($b);'),(195,'PHP-> 将ip字串转为int，或将int转为ip','\n\n$a = \"192.168.1.111\";\necho $b = ip2long($a);	\n// -1062731409\n\necho $c = long2ip($b);	\n// 192.168.1.111'),(196,'PHP-> 删除字串中的html,xml,php标签','\n$a=\"<script>alert(1);</script>\";\necho strip_tags($a);			//alert(1);'),(197,'PHP-> 数组方式替换字串中所有匹配到的字符','\n\n\n$a = \"abcabc\";\necho strtr($a,array(\"c\"=>\"-\"));\n//ab-ab-'),(198,'PHP-> 将字串中的 杠r 转换成<br>','\n\n\nnl2br($str);'),(199,'PHP-> 字串和ASCLL码转换的两个函数 ','\n//-- ord() 将字符转成ASCLL码\n$a=\"a\";\necho ord($a);		// 97\n\n\n\n\n//-- 将ASCLL 码转成字符\n$a=89;\necho chr($a);		// Y'),(200,'PHP-> 反转字串','\n$a = \"abcdefg\";\necho $b = strrev($a);	\n//gfedcba'),(201,'PHP-> 千位分组格式化数字','\n$a=12345.667;\n\necho $b = number_format($a,3,\".\",\",\");\n\n//12,345.667\n\n参数一：数字串\n参数二：要保留的小数位数\n参数三：小数与整数的分隔符\n参数四：整数千位的分隔符'),(202,'PHP-> 截取字串','\n$a=\"abcdefg\";\n//echo substr($a,\"3\");	//defg	从下标3 截取至结尾\n//echo substr($a,\"-3\");	//efg	从倒数第三个截取至结尾 \n//echo substr($a,2,3);	//cde 	从下标2开始，截取后面的三个字符\necho substr($a,-3,2);	//ef	从倒数第3个字符，截取2个字符'),(203,'PHP-> 随机打乱字串','\n$a=\"abcdefg\";\necho str_shuffle($a);	\n//bcaedgf'),(204,'PHP-> 计算两个字串的相似度','\n$a = \"abcdefghijk\";\n$b = \"asdfjoin;ae\";\n$c = similar_text($a,$b,$res);\necho $c;\necho $res;	//18.181818181818'),(205,'PHP-> 将字串按指定长度分割成小块以及数组的两个函数','\n//--将字串按指定长度分割成数组\nstr_split(str,\"7\");\n\n	\n		\n//将字串按指定长度分隔成小块（空格或指定符号分隔）		\n$a=\"abcdefg\";\necho chunk_split($a,3);\n// abc def g 	默认用空格分隔\n\necho chunk_split($a,3,\"-\");\n// abc-def-g-	使用指定符号分隔'),(206,'PHP-> 比较两字串首对有差异的字符，反加差异的位差。普通方式，自然顺序方式，前n个字符方式，并区分大小写的三组函数','\n\n//-- strnatcasecmp() 自然顺序比较两字串差异，不区分大小写\n$a=\"Gbc\";\n$b=\"abc\";\necho strnatcasecmp($a,$b);		//1\necho strnatcasecmp($b,$a);		//-1\n\n//两组字串以下标位置逐个字符做比较，不区分大小写\n	按下标位置只比较首对出现差异的字母，后面全部忽略 \n	 两字串完全相同时，返回0\n	 有差异时，变量1字母顺序减去变量字母顺序2,结果为正时返回1，结果为负时返回-1\n	 有差异时只对首对差异比较，以后不计，\n	 大写的顺序值小于小写的顺序值\n\n\n\n\n\n//-- strnatcmp() 自然顺序比较两字串差异,区分大小写\n$a=\"abdsdkjfsldf\";\n$b=\"abAsdf\";\necho strnatcmp($a,$b);		//1\necho strnatcmp($b,$a);		//-1\n\n//两组字串以下标位置逐个字符做比较，\n	按下标位置只比较首对出现差异的字母，后面全部忽略 \n	两字串完全相同时，返回0\n	有差异时，变量1字母顺序减去变量字母顺序2,结果为正时返回1，结果为负时返回-1\n	有差异时只对首对差异比较，以后不计，\n\n\n\n	\n	\n\n//-- strncmp() 比较两字串前N个字符的差异,区分大小写\n$a=\"abcdefg\";\n$b=\"abcflje\";\necho strncmp($a,$b,5);	//-1\necho strncmp($b,$a,5);	// 1\n//按下标位置只比较首对出现差异的字母，后面全部忽略 \n//只比较两字串指定前N个字符\n//两字串完全相同时，返回0 。\n//有差异时，只做首对有差异的字符比较，其后不计。差异比较时只返回1或-1 当变量1的字母顺序大于变量2的字母顺序时返回1，反之则返回-1. 如A 和 B 比较，返回-1，反之则返回1、另 a 的顺序比A大\n\n\n\n\n\n\n//-- 比较两字串前 n个字符，并返回字母位置差\n$a=\"abcdefg\";\n$b=\"abcaskef\";\necho strncasecmp($a,$b,4);	// 3\necho strncasecmp($b,$a,4);	// -3\n//两组字串以下标位置逐个字符做比较，只比较指定的下标范围的字符\n	按下标位置只比较首对出现差异的字母，后面全部忽略 \n	 两字串完全相同时，返回0\n	 有差异时只对首对差异比较，以后不计，返回变量1的字母顺序减去变量2的字母顺序，如 a 和 f 的比对结果为-5 ，f 和 a 的比对结果为5\n\n\n\n\n\n\n\n\n\n//-- strcmp() 以下标位置逐对比较两个字串，区分大小写\n$a=\"AgFc\";\n$b=\"agGoe\";\necho strcmp($a,$b);		// -1\necho strcmp($b,$a);		//  1\n//按下标位置只比较首对出现差异的字母，后面全部忽略 \n//两字串完全相同时，返回0 。\n//有差异时，只做首对有差异的字符比较，其后不计。差异比较时只返回1或-1 当变量1的字母顺序大于变量2的字母顺序时返回1，反之则返回-1. 如A 和 B 比较，返回-1，反之则返回1、另 a 的顺序比A大\n\n\n\n//-- strcasecmp() 以下标位置逐对比较两个字串,不区分大小写\n$a = \"fbedefghijklaaa\";\n$b = \"abcdefghijklaakfdsfdfds\";\necho strcasecmp($a,$b);		//  5\necho strcasecmp($b,$a);		// -5\n//两组字串以下标位置逐个字符做比较，\n	按下标位置只比较首对出现差异的字母，后面全部忽略 \n	 两字串完全相同时，返回0\n	 有差异时只对首对差异比较，以后不计，返回变量1的字母顺序减去变量2的字母顺序，如 a 和 f 的比对结果为-5 ，f 和 a 的比对结果为5'),(207,'PHP-> 以指定长度将字串折行处理','\n\n$text = \"The quick brown fox jumped over the lazy dog.\";\necho wordwrap($text,10,\"<br><br>\");\n		The quick\n\n		brown fox\n\n		jumped\n\n		over the\n		\n		lazy dog.'),(208,'PHP-> 数组合并字串，字串拆分成数组的两个函数','\n\n//-- implode() 将数组各元素用指定字符连接成一个字串\n$a = array(\"aa\",\"bb\",\"cc\");\nvar_dump(implode(\",\",$a));			//aa,bb,cc\n\n\n//-- explode() 	将字串以指定字符分割成数组\n$a=\"abc,efg,hij\";\n$b = explode(\",\",$a);\nvar_dump($b);\n		array(3) {\n		  [0]=>\n		  string(3) \"abc\"\n		  [1]=>\n		  string(3) \"efg\"\n		  [2]=>\n		  string(3) \"hij\"\n		}'),(209,'PHP-> 以数组方式解析 url 的组成部分，返回协议名，域名，路径及文件，参数','\n$url=\"http://www.baidu.com/obj/img/3024.html?id=32&name=abc\";\n$arr=parse_url($url);\nvar_dump($arr);\n	array(4) {\n	  [\"scheme\"]=>\n	  string(4) \"http\"\n	  [\"host\"]=>\n	  string(13) \"www.baidu.com\"\n	  [\"path\"]=>\n	  string(18) \"/obj/img/3024.html\"\n	  [\"query\"]=>\n	  string(14) \"id=32&name=abc\"\n	}'),(210,'PHP-> 统计字串中含有的单词数','\n$a=\"this is a very builltfull gril\";\n\necho str_word_count($a);\n\n//6'),(211,'PHP-> 用指定字符填充字串','\n$a=\"aaa\";\n//echo str_pad($a,10,\"c\");		//aaaccccccc		\n//echo str_pad($a,8,\"#\",STR_PAD_LEFT);		//#####aaa\n//echo str_pad($a,8,\"#\",STR_PAD_RIGHT);		//aaa#####\necho str_pad($a,8,\"#^\",STR_PAD_BOTH);		//#^aaa#^#'),(212,'PHP -> 1，替换字串中匹配到的内容，2，替换截取字串的内容','\n\n//==str_replace() 替换匹配到的内容\n\n//str_ireplace() 用字串替换字串或字串中的内容,不区分大小写\n$a=\"Abcdefg\";\n//echo str_ireplace(\"a\",\"jjj\",$a);		//jjjbcdefg\n$y1=array(\"b\",\"c\");\n$y2=array(\"m\",\"n\");\necho str_ireplace($y1,$y2,$a,$num);		\n//Amndefg \necho $num;	//2 替换的个数\n\n//str_replace() 用字串替换字串或字串中的内容,区分大小写\n$a = \"abcdefg\";\necho str_replace(\"de\",\"ggg\",$a);		//abcgggfg\n\n\n\n\n//== substr_replace()替换截取的字串\n$a=\"abcdefg\"; \n$b=\"ppp\";\necho substr_replace($a,\"ppp\",-2);	//abcdeppp\n将倒数第二个字符到结尾的内容替换成ppp\n\necho substr_replace($a,\"ppp\",2);	//abppp \n将第二个字符到结尾的内容替换成ppp\n\necho substr_replace($a,\"ppp\",1,5);	//apppg	\n将下标为1-5的字符内容替换成ppp'),(213,'PHP-> 获取字串中首次或尾次出现至最后的字符的三个函数','\n$str = \"abcdefghijklcnm\";\n\n//返回指定字符首次出现到最后的字符,区分大小写\n//echo strstr($str,\"c\");	\n\n//返回指定字符首次出现到最后的字符,不区分大小写\n//echo stristr($str,\"C\");\n\n//返回指定字符尾次出现到最后的字符,区分大小写\n//echo strrchr($str,\"c\");'),(214,'PHP-> 以指定编码获取字符串长度','\n$a = \"在下天下无乱敌\";\necho strlen($a);		//21\necho mb_strlen($a,\"gbk\");	//11\necho mb_strlen($a,\"utf-8\");	//7\necho mb_strlen($a,\"unicode\");	//10'),(215,'PHP-> 去除字串左右两侧的空格或指定字符的三个函数','\n\n//-- ltrim() 去除字串中左侧的空格或指定字符\n\n$a=\"  a  \";\necho \"b\".ltrim($a).\"b\";		//ba  b\n\n$c=\"aaccaa\";\necho ltrim($c,\"aa\");		//ccaa\n\n\n\n//-- rtrim() 去除字串中右侧的空格或指定字符 ,别名： chop\n\n$a=\"  a  \";\necho \"b\".rtrim($a).\"b\";		//b  ab\n\n$c = \"aaccaa\";\necho rtrim($c,\"a\");			//aacc'),(216,'PHP-> 数组与URL字串相互转换的两个函数','\n//将数组转换成URL字串\n\n$a = array(\"aa\",\"bb\",\"cc\"=>\"ccc\");\n/echo http_build_query($a);		//0=aa&1=bb&cc=ccc\necho http_build_query($a,\"index_\");	//index_0=aa&index_1=bb&cc=ccc\n\n\n将url字串解析成数组\n\n$a= \"id=23&name=abc&age=28\";\nparse_str($a,$arr);\nprint_r($arr);\n		Array\n		(\n			[id] => 23\n			[name] => abc\n			[age] => 28\n		)'),(217,'PHP-> 截取字符串并指定其编码','\n\n\n$a=\"abcdefg\";\necho mb_substr($a,3,3,\"utf-8\");	\n\n// def	从下标3 开始，截取3个字符，并指定编码为utf-8'),(218,'PHP-> 获取URL中路径，文件全名，文件名，后缀名的函数和它的四个参数','\n$u=\"http://www.baidu.com/obj/index.php\";\n\necho pathinfo($u,PATHINFO_DIRNAME);	//http://www.baidu.com/obj\necho pathinfo($u,PATHINFO_BASENAME);	\n// index.php\necho pathinfo($u,PATHINFO_FILENAME);	\n// index\necho pathinfo($u,PATHINFO_EXTENSION);\n// php'),(219,'PHP-> 获取字串的长度','\n$a=\"abcdefg\";\necho strlen($a);		//7'),(220,'PHP-> 输出格式化字符串','\n\n$str =<<<THESTRING\nI like the state of %1$s <br /> \nI picked: %2$d as a number, <br /> \nI also picked %2$d as a number again <br /> \n%3$s<br />\nTHESTRING;\n\n$nstr= vprintf($str,array(\"Oregon\",\"7\",\"I Love Oregon\"));\n//注解： \n// %1 使用数组中第一个元素代替\n// %2 使用数组中第二个元素代替\n// %3 使用数组中第三个元素代替\n\n//string s \n//integer d, u, c, o, x, X, b  \n//double g, G, e, E, f, F'),(221,'PHP-> 获取字串中指定字符首次，尾次出现的位置，并区分大小写的四个函数','\n\n//-- strrpos()  返回字串中指定字符最后一次出现的位置，区分大小写\n$a=\"abecdefg\";\necho strrpos($a,\"e\");		//5\n\n//-- strripos() 返回字串中指定字符最后一次出现的位置，不区分大小写\n$a=\"abfcdefg\";\necho strripos($a,\"F\");		//6\n\n//-- strpos() 返回字串中指定字符首次出现的位置,区分大小写\n$a=\"abcdefg\";\necho strpos($a,\"e\");	//4\n\n//-- stripos() 返回字串中指定字符首次出现的位置，不区分大小写\n$a = \"abcdefg\";\necho stripos($a,\"C\");	//2'),(222,'PHP-> 切除字串中指定字符以后的内容','\n$a=\"abceefg\";\nvar_dump(strtok($a,\"e\"));\n// abc'),(223,'PHP-> 1，统计字串中所有字母出现的次数。2，统计指定字符在字串中出现的次数','\n\n\n统计指定字符在字串中出现的次数\n\n$a=\"aluukasfasaluusajfluu\";\necho substr_count($a,\"uu\");\n//3\n\n\n\n返回字串中所有字母出现的次数\n\n$a = \"abclskajefheskjf\";\n$arr = count_chars($a);	\n//返回的是一个从0到255的ASCLL码统计的数组\nprint_r($arr);	\n//如 a 出现了两次，统计中就是97 对应的值为 2\n		[97] => 2\n		[98] => 1\n		[99] => 1\n		[100] => 0\n		[101] => 2\n		[102] => 2'),(224,'PHP-> 将字串加密的两个函数','\n$a=\"a\";\necho sha1($a);\n\n\n\n$a=\"a\";\necho md5($a);'),(251,'linux-> shell 脚本中包含子脚本的示例','\n\n\n#!/bin/bash\nexport send=1		//声明全局变量，这样子脚本中也可以访问访该变量\n/bin/bash ../xxx/xx.sh		//运行另一个脚本（子脚本）'),(252,'linux-> selinux 防护状态的获取与设置。2，清空ip规则','\n\ngetenforec	\n获取当前防护状态 inforcing/disabled\n\nsetenforce 0		\n临时关闭防护\n\n永久关闭防护 \n修改文件 /etc/selinux/config\n将 SELINUX=enforcing 改为 disabled\n\n\n清空ip规则\n\niptables -F'),(253,'linux->  expect 远程登操作工具的使用','\n\n\n安装：\nyum -y install expect\n\n\n远程文件同步：\nspawn rsync -avP root@192.168.1.100:/tmp/1.txt /tmp/\n    //将远程文件拷贝到目录tmp下\nexpect {    \n \"yes/no\" {send \"yes r\"}\n \"password\" {send \"$pwd r\"}\n}\nexpect eof\n    //eof 结束\n\n\n远程登陆及操作：\nset host [lindex $argv 0]   \n     //设置变量host 并使用参数1为其赋值\nset pwd [lindex $argv 1]\n     //设置变量pwd 并使用参数2为其赋值\nspawn ssh root@$host\n     //登陆远程服务器\nexpect {    \n \"yes/no\" {send \"yes r\"}\n \"password\" {send \"$pwd r\"}\n       r 发送命令\n}\nexpect \"]*\"\nsend ......\nexpect \"]*\"\nsend \"exit r\"'),(255,'PHP-> 获取当前页面的URL地址的三个超全局变量 ','\n\n//获取当前访问的文件名\necho $_SERVER[\"PHP_SELF\"];\n\n//获取当前访问的域名\necho $_SERVER[\"HTTP_HOST\"];\n\n//获取当前访问的路径和文件名\necho $_SERVER[\"REQUEST_URI\"];\n\n\n//获取当前访问的全URL地址\necho \"http://\".$_SERVER[\"HTTP_HOST\"].$_SERVER[\"REQUEST_URI\"]'),(256,'linux-> chattr 设置比root权限更高级别的权限','\n\n有时在nginx环境下会发现有些文件连root权限都不无法操作，那么就先使用 chattr 执行一下再做其它操作即可\n\n如：\n直接删除文件 .user.ini 提示权限不够\n\nchattr .user.ini\n\nrm -rf .user.ini 		就可以删除了'),(257,'PHP-> 数组的拆分，合并的八个函数','\n\n\n\n\n\n\n\n\n\n\n//http_build_query() 将数组合并成url字串\n$a=array(\"a\"=>\"aa\",\"b\"=>\"bb\");\n$b=http_build_query($a);\nprint_r($b);	//a=aa&b=bb\n\n\n//parse_str(); 将url字串转换成数组\nparse_str(str,arr);\n\n\n//array_chunk() 将一维数组分割成二维数组\n$a=array(\"aa\",\"bb\",\"cc\",\"dd\",\"ee\",\"ff\",\"gg\",\"hh\");\n$b=array_chunk($a,2); \n//每两个元素的长度分割成二维数组 \n\n\n//array_slice() 截取数组指定区间元素\narray_slice(arr1,start|start,end);\n\n\n\n//implode() 将数组合并成字串\n$a=array(\"aa\",\"bb\",\"cc\");\n$b=implode(\"-\",$a);\nprint_r($b); //aa-bb-cc\n\n\n\n//explode() 将字串拆分成数组\n$a=\"abc,def,gh,ijk\";\n$b = explode(”,“,$a);\nprint_r($b); \nArray ( [0] => abc [1] => def [2] => gh [3] => ijk ) \n\n\n\n//array_merge() 合并多个数组：\n$a=array(\"a\"=>\"aa\");\n$b=array(\"b\"=>\"bb\");\n$c = array_merge($a,$b);\n\n\n//array_mege_recursive(); 递归合并数组\n$ar1 = array(\"color\" => array(\"favorite\" => \"red\"), 5);\n$ar2 = array(10, \"color\" => array(\"favorite\" => \"green\", \"blue\"));\n$result = array_merge_recursive($ar1, $ar2);\n结果： \nArray\n(\n    [color] => Array\n        (\n            [favorite] => Array\n                (\n                    [0] => red\n                    [1] => green\n                )\n            [0] => blue\n        )\n    [0] => 5\n    [1] => 10\n)');
/*!40000 ALTER TABLE `linux_commend` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `stat`
--

DROP TABLE IF EXISTS `stat`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `stat` (
  `listname` varchar(55) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `stat`
--

LOCK TABLES `stat` WRITE;
/*!40000 ALTER TABLE `stat` DISABLE KEYS */;
INSERT INTO `stat` VALUES ('javascript');
/*!40000 ALTER TABLE `stat` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `strfun`
--

DROP TABLE IF EXISTS `strfun`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `strfun` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `ch` varchar(9999) DEFAULT NULL,
  `en` varchar(9999) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=94 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `strfun`
--

LOCK TABLES `strfun` WRITE;
/*!40000 ALTER TABLE `strfun` DISABLE KEYS */;
INSERT INTO `strfun` VALUES (55,'PHP-> 单词首字母大写，字串首字母大写，字串的大小写等四个函数','\n//-- 字串中每个单词首字母大写\n$a=\"this is a new days \";\necho ucwords($a);		//This Is A New Days \n\n//-- 字串首字母大写\n$a=\"abc\";\necho ucfirst($a);		//Abc\n\n//-- strtoupper() 将字串转为大写\n$a = \"abcdefg\";\necho strtoupper($a);		//ABCDEFG\n\n//-- strtolower() 将字串转为小写\n$a = \"ABCD\";\necho strtolower($a);		//abcd'),(56,'PHP-> 将字串中的$,^,*,(,),+,[,],.,? 前面添加反斜线','\n\n$a=\"!@#$%^&*()_+1234567890qwertyuiop[]{}|asdfghjkl;:zxcvbnm,./<>?\";\necho quotemeta($a);'),(57,'PHP-> 反斜线添加与删除的四个函数','\n\naddslashes();\nstripslashes();\naddcslashes();\nstripcslashes();\n\n//-- stripslashes() 去除字串中所有反斜线\n$a = \"\\\\\\\\0\\\\\\\\a\\\\b\\c\\de\";		\necho stripslashes($a);			\n// \\\\0\\acde\n注：去除字串中的反斜线，但每4个连续的反斜线会保留1个反斜线 \n\n\n//-- addslashes() 给 \",\",  前加反斜线\n$a=\"a\\b\\c\\\\d\\\\e-\"bb\"\";\necho $b = addslashes($a);		\n//\\a\\b\\\\c\\\\d\\\\\\e\n//注： 原有反斜线个数为奇数时才会加反斜线，原反斜线个数为偶数时不会加。\n\n\n//-- 去除字串中的反斜线，及\\r,\\n,\\v等,虽不显示，但效果还在\n$a=\"\\\\k\\\\\\\\k\\\\\\\\\\\\kva\rbckdwkf\naakkke  vvvab\r\n\";\necho stripcslashes($a);\nk\\k\\va\nbckdwkf\naakkke  vvab\n 注：每4个连续的反斜线会保留1个\n\n\n//-- 给字串中指定字符前添加反斜线 \n$a = \"anbcdefnghijklmn\";\necho addcslashes($a,\"nbh\");		\n//a\ncdef\nghijklm\n'),(58,'PHP-> 预定义字符转html实体,标签不变但失去功能及将实体字符反转的三个函数','\n\n//htmlentities()\n//htmlspecialchars() 预定义字符转html实体,标签不变但失去功能(同htmlentities)\n$a=\"<script>alert(\"a\");</script>\";\necho htmlspecialchars($a);		//<script>alert(\"a\");</script>\n将标签转为实体，标签正常显示，但失去标签的意义了测试效果和htmlentities一样，没搞明白它俩有什么区别\n	\n可用html_entity_decode() 进行实体反转\n	echo $a = \"<b>vvv</b>\";\n	echo $b = htmlentities($a);\n	echo $c = html_entity_decode($b);'),(59,'PHP-> 将字串重复指定次数','\n\n$a = \"abc\";\necho str_repeat($a,3);	\n//abcabcabc'),(60,'PHP-> 获取路径（除文件名外的路径）','\n$u = \"http:www.baidu.com/aaa/bbb/ccc/a.jpg\";\necho dirname($u);		//http:www.baidu.com/aaa/bbb/ccc'),(61,'PHP-> 对字串进行url编码和解码','\n$a = \"我是一个字符串\";\necho $b = urlencode($a);\necho $c = urldecode($b);'),(62,'PHP-> 将ip字串转为int，或将int转为ip','\n\n$a = \"192.168.1.111\";\necho $b = ip2long($a);	\n// -1062731409\n\necho $c = long2ip($b);	\n// 192.168.1.111'),(63,'PHP-> 删除字串中的html,xml,php标签','\n$a=\"<script>alert(1);</script>\";\necho strip_tags($a);			//alert(1);'),(64,'PHP-> 数组方式替换字串中所有匹配到的字符','\n\n\n$a = \"abcabc\";\necho strtr($a,array(\"c\"=>\"-\"));\n//ab-ab-'),(65,'PHP-> 将字串中的 杠r 转换成<br>','\n\n\nnl2br($str);'),(66,'PHP-> 字串和ASCLL码转换的两个函数 ','\n//-- ord() 将字符转成ASCLL码\n$a=\"a\";\necho ord($a);		// 97\n\n\n\n\n//-- 将ASCLL 码转成字符\n$a=89;\necho chr($a);		// Y'),(67,'PHP-> 反转字串','\n$a = \"abcdefg\";\necho $b = strrev($a);	\n//gfedcba'),(68,'PHP-> 千位分组格式化数字','\n$a=12345.667;\n\necho $b = number_format($a,3,\".\",\",\");\n\n//12,345.667\n\n参数一：数字串\n参数二：要保留的小数位数\n参数三：小数与整数的分隔符\n参数四：整数千位的分隔符'),(69,'PHP-> 截取字串','\n$a=\"abcdefg\";\n//echo substr($a,\"3\");	//defg	从下标3 截取至结尾\n//echo substr($a,\"-3\");	//efg	从倒数第三个截取至结尾 \n//echo substr($a,2,3);	//cde 	从下标2开始，截取后面的三个字符\necho substr($a,-3,2);	//ef	从倒数第3个字符，截取2个字符'),(70,'PHP-> 随机打乱字串','\n$a=\"abcdefg\";\necho str_shuffle($a);	\n//bcaedgf'),(71,'PHP-> 计算两个字串的相似度','\n$a = \"abcdefghijk\";\n$b = \"asdfjoin;ae\";\n$c = similar_text($a,$b,$res);\necho $c;\necho $res;	//18.181818181818'),(72,'PHP-> 将字串按指定长度分割成小块以及数组的两个函数','\n//--将字串按指定长度分割成数组\nstr_split(str,\"7\");\n\n	\n		\n//将字串按指定长度分隔成小块（空格或指定符号分隔）		\n$a=\"abcdefg\";\necho chunk_split($a,3);\n// abc def g 	默认用空格分隔\n\necho chunk_split($a,3,\"-\");\n// abc-def-g-	使用指定符号分隔'),(73,'PHP-> 比较两字串首对有差异的字符，反加差异的位差。普通方式，自然顺序方式，前n个字符方式，并区分大小写的三组函数','\n\n//-- strnatcasecmp() 自然顺序比较两字串差异，不区分大小写\n$a=\"Gbc\";\n$b=\"abc\";\necho strnatcasecmp($a,$b);		//1\necho strnatcasecmp($b,$a);		//-1\n\n//两组字串以下标位置逐个字符做比较，不区分大小写\n	按下标位置只比较首对出现差异的字母，后面全部忽略 \n	 两字串完全相同时，返回0\n	 有差异时，变量1字母顺序减去变量字母顺序2,结果为正时返回1，结果为负时返回-1\n	 有差异时只对首对差异比较，以后不计，\n	 大写的顺序值小于小写的顺序值\n\n\n\n\n\n//-- strnatcmp() 自然顺序比较两字串差异,区分大小写\n$a=\"abdsdkjfsldf\";\n$b=\"abAsdf\";\necho strnatcmp($a,$b);		//1\necho strnatcmp($b,$a);		//-1\n\n//两组字串以下标位置逐个字符做比较，\n	按下标位置只比较首对出现差异的字母，后面全部忽略 \n	两字串完全相同时，返回0\n	有差异时，变量1字母顺序减去变量字母顺序2,结果为正时返回1，结果为负时返回-1\n	有差异时只对首对差异比较，以后不计，\n\n\n\n	\n	\n\n//-- strncmp() 比较两字串前N个字符的差异,区分大小写\n$a=\"abcdefg\";\n$b=\"abcflje\";\necho strncmp($a,$b,5);	//-1\necho strncmp($b,$a,5);	// 1\n//按下标位置只比较首对出现差异的字母，后面全部忽略 \n//只比较两字串指定前N个字符\n//两字串完全相同时，返回0 。\n//有差异时，只做首对有差异的字符比较，其后不计。差异比较时只返回1或-1 当变量1的字母顺序大于变量2的字母顺序时返回1，反之则返回-1. 如A 和 B 比较，返回-1，反之则返回1、另 a 的顺序比A大\n\n\n\n\n\n\n//-- 比较两字串前 n个字符，并返回字母位置差\n$a=\"abcdefg\";\n$b=\"abcaskef\";\necho strncasecmp($a,$b,4);	// 3\necho strncasecmp($b,$a,4);	// -3\n//两组字串以下标位置逐个字符做比较，只比较指定的下标范围的字符\n	按下标位置只比较首对出现差异的字母，后面全部忽略 \n	 两字串完全相同时，返回0\n	 有差异时只对首对差异比较，以后不计，返回变量1的字母顺序减去变量2的字母顺序，如 a 和 f 的比对结果为-5 ，f 和 a 的比对结果为5\n\n\n\n\n\n\n\n\n\n//-- strcmp() 以下标位置逐对比较两个字串，区分大小写\n$a=\"AgFc\";\n$b=\"agGoe\";\necho strcmp($a,$b);		// -1\necho strcmp($b,$a);		//  1\n//按下标位置只比较首对出现差异的字母，后面全部忽略 \n//两字串完全相同时，返回0 。\n//有差异时，只做首对有差异的字符比较，其后不计。差异比较时只返回1或-1 当变量1的字母顺序大于变量2的字母顺序时返回1，反之则返回-1. 如A 和 B 比较，返回-1，反之则返回1、另 a 的顺序比A大\n\n\n\n//-- strcasecmp() 以下标位置逐对比较两个字串,不区分大小写\n$a = \"fbedefghijklaaa\";\n$b = \"abcdefghijklaakfdsfdfds\";\necho strcasecmp($a,$b);		//  5\necho strcasecmp($b,$a);		// -5\n//两组字串以下标位置逐个字符做比较，\n	按下标位置只比较首对出现差异的字母，后面全部忽略 \n	 两字串完全相同时，返回0\n	 有差异时只对首对差异比较，以后不计，返回变量1的字母顺序减去变量2的字母顺序，如 a 和 f 的比对结果为-5 ，f 和 a 的比对结果为5'),(74,'PHP-> 以指定长度将字串折行处理','\n\n$text = \"The quick brown fox jumped over the lazy dog.\";\necho wordwrap($text,10,\"<br><br>\");\n		The quick\n\n		brown fox\n\n		jumped\n\n		over the\n		\n		lazy dog.'),(75,'PHP-> 数组合并字串，字串拆分成数组的两个函数','\n\n//-- implode() 将数组各元素用指定字符连接成一个字串\n$a = array(\"aa\",\"bb\",\"cc\");\nvar_dump(implode(\",\",$a));			//aa,bb,cc\n\n\n//-- explode() 	将字串以指定字符分割成数组\n$a=\"abc,efg,hij\";\n$b = explode(\",\",$a);\nvar_dump($b);\n		array(3) {\n		  [0]=>\n		  string(3) \"abc\"\n		  [1]=>\n		  string(3) \"efg\"\n		  [2]=>\n		  string(3) \"hij\"\n		}'),(76,'PHP-> 以数组方式解析 url 的组成部分，返回协议名，域名，路径及文件，参数','\n$url=\"http://www.baidu.com/obj/img/3024.html?id=32&name=abc\";\n$arr=parse_url($url);\nvar_dump($arr);\n	array(4) {\n	  [\"scheme\"]=>\n	  string(4) \"http\"\n	  [\"host\"]=>\n	  string(13) \"www.baidu.com\"\n	  [\"path\"]=>\n	  string(18) \"/obj/img/3024.html\"\n	  [\"query\"]=>\n	  string(14) \"id=32&name=abc\"\n	}'),(77,'PHP-> 统计字串中含有的单词数','\n$a=\"this is a very builltfull gril\";\n\necho str_word_count($a);\n\n//6'),(78,'PHP-> 用指定字符填充字串','\n$a=\"aaa\";\n//echo str_pad($a,10,\"c\");		//aaaccccccc		\n//echo str_pad($a,8,\"#\",STR_PAD_LEFT);		//#####aaa\n//echo str_pad($a,8,\"#\",STR_PAD_RIGHT);		//aaa#####\necho str_pad($a,8,\"#^\",STR_PAD_BOTH);		//#^aaa#^#'),(79,'PHP -> 1，替换字串中匹配到的内容，2，替换截取字串的内容','\n\n//==str_replace() 替换匹配到的内容\n\n//str_ireplace() 用字串替换字串或字串中的内容,不区分大小写\n$a=\"Abcdefg\";\n//echo str_ireplace(\"a\",\"jjj\",$a);		//jjjbcdefg\n$y1=array(\"b\",\"c\");\n$y2=array(\"m\",\"n\");\necho str_ireplace($y1,$y2,$a,$num);		\n//Amndefg \necho $num;	//2 替换的个数\n\n//str_replace() 用字串替换字串或字串中的内容,区分大小写\n$a = \"abcdefg\";\necho str_replace(\"de\",\"ggg\",$a);		//abcgggfg\n\n\n\n\n//== substr_replace()替换截取的字串\n$a=\"abcdefg\"; \n$b=\"ppp\";\necho substr_replace($a,\"ppp\",-2);	//abcdeppp\n将倒数第二个字符到结尾的内容替换成ppp\n\necho substr_replace($a,\"ppp\",2);	//abppp \n将第二个字符到结尾的内容替换成ppp\n\necho substr_replace($a,\"ppp\",1,5);	//apppg	\n将下标为1-5的字符内容替换成ppp'),(80,'PHP-> 获取字串中首次或尾次出现至最后的字符的三个函数','\n$str = \"abcdefghijklcnm\";\n\n//返回指定字符首次出现到最后的字符,区分大小写\n//echo strstr($str,\"c\");	\n\n//返回指定字符首次出现到最后的字符,不区分大小写\n//echo stristr($str,\"C\");\n\n//返回指定字符尾次出现到最后的字符,区分大小写\n//echo strrchr($str,\"c\");'),(81,'PHP-> 以指定编码获取字符串长度','\n$a = \"在下天下无乱敌\";\necho strlen($a);		//21\necho mb_strlen($a,\"gbk\");	//11\necho mb_strlen($a,\"utf-8\");	//7\necho mb_strlen($a,\"unicode\");	//10'),(82,'PHP-> 去除字串左右两侧的空格或指定字符的三个函数','\n\n//-- ltrim() 去除字串中左侧的空格或指定字符\n\n$a=\"  a  \";\necho \"b\".ltrim($a).\"b\";		//ba  b\n\n$c=\"aaccaa\";\necho ltrim($c,\"aa\");		//ccaa\n\n\n\n//-- rtrim() 去除字串中右侧的空格或指定字符 ,别名： chop\n\n$a=\"  a  \";\necho \"b\".rtrim($a).\"b\";		//b  ab\n\n$c = \"aaccaa\";\necho rtrim($c,\"a\");			//aacc'),(83,'PHP-> 数组与URL字串相互转换的两个函数','\n//将数组转换成URL字串\n\n$a = array(\"aa\",\"bb\",\"cc\"=>\"ccc\");\n/echo http_build_query($a);		//0=aa&1=bb&cc=ccc\necho http_build_query($a,\"index_\");	//index_0=aa&index_1=bb&cc=ccc\n\n\n将url字串解析成数组\n\n$a= \"id=23&name=abc&age=28\";\nparse_str($a,$arr);\nprint_r($arr);\n		Array\n		(\n			[id] => 23\n			[name] => abc\n			[age] => 28\n		)'),(84,'PHP-> 截取字符串并指定其编码','\n\n\n$a=\"abcdefg\";\necho mb_substr($a,3,3,\"utf-8\");	\n\n// def	从下标3 开始，截取3个字符，并指定编码为utf-8'),(85,'PHP-> 获取URL中路径，文件全名，文件名，后缀名的函数和它的四个参数','\n$u=\"http://www.baidu.com/obj/index.php\";\n\necho pathinfo($u,PATHINFO_DIRNAME);	//http://www.baidu.com/obj\necho pathinfo($u,PATHINFO_BASENAME);	\n// index.php\necho pathinfo($u,PATHINFO_FILENAME);	\n// index\necho pathinfo($u,PATHINFO_EXTENSION);\n// php'),(86,'PHP-> 获取字串的长度','\n$a=\"abcdefg\";\necho strlen($a);		//7'),(87,'PHP-> 输出格式化字符串','\n\n$str =<<<THESTRING\nI like the state of %1$s <br /> \nI picked: %2$d as a number, <br /> \nI also picked %2$d as a number again <br /> \n%3$s<br />\nTHESTRING;\n\n$nstr= vprintf($str,array(\"Oregon\",\"7\",\"I Love Oregon\"));\n//注解： \n// %1 使用数组中第一个元素代替\n// %2 使用数组中第二个元素代替\n// %3 使用数组中第三个元素代替\n\n//string s \n//integer d, u, c, o, x, X, b  \n//double g, G, e, E, f, F'),(88,'PHP-> 获取字串中指定字符首次，尾次出现的位置，并区分大小写的四个函数','\n\n//-- strrpos()  返回字串中指定字符最后一次出现的位置，区分大小写\n$a=\"abecdefg\";\necho strrpos($a,\"e\");		//5\n\n//-- strripos() 返回字串中指定字符最后一次出现的位置，不区分大小写\n$a=\"abfcdefg\";\necho strripos($a,\"F\");		//6\n\n//-- strpos() 返回字串中指定字符首次出现的位置,区分大小写\n$a=\"abcdefg\";\necho strpos($a,\"e\");	//4\n\n//-- stripos() 返回字串中指定字符首次出现的位置，不区分大小写\n$a = \"abcdefg\";\necho stripos($a,\"C\");	//2'),(89,'PHP-> 切除字串中指定字符以后的内容','\n$a=\"abceefg\";\nvar_dump(strtok($a,\"e\"));\n// abc'),(91,'PHP-> 1，统计字串中所有字母出现的次数。2，统计指定字符在字串中出现的次数','\n\n\n统计指定字符在字串中出现的次数\n\n$a=\"aluukasfasaluusajfluu\";\necho substr_count($a,\"uu\");\n//3\n\n\n\n返回字串中所有字母出现的次数\n\n$a = \"abclskajefheskjf\";\n$arr = count_chars($a);	\n//返回的是一个从0到255的ASCLL码统计的数组\nprint_r($arr);	\n//如 a 出现了两次，统计中就是97 对应的值为 2\n		[97] => 2\n		[98] => 1\n		[99] => 1\n		[100] => 0\n		[101] => 2\n		[102] => 2'),(92,'PHP-> 将字串加密的两个函数','\n$a=\"a\";\necho sha1($a);\n\n\n\n$a=\"a\";\necho md5($a);'),(93,'PHP-> 查找字串1中连续匹配或不匹配串2中的字符的个数的两个函数 ','\n\n//-- strspn(str,str,[start,length]) 查找字串2中字符在字串1中连续出现的个数\n//注意：这里只会统计连续出现字串2中字符的个数，如出现了非串2中的字符，统计将会结束。\n$a=\"abcaa\";\n$b=\"abc\";\necho strspn($a,$b);		\n//5 连续找到5个\n\n$a=\"abcada\";\n$b=\"abc\";\necho strspn($a,$b);		\n//连续找到4个\n\n$a=\"abcdaa\";\n$b=\"abc\";\necho strspn($a,$b);		\n//连续找到3个\n\n\n\n\n\n//-- strcspn(str,str) 查找串1中连续且非串2中字符的个数\n$a=\"abcdefg\";\n$b=\"dg\";\necho strcspn($a,$b);		\n//字串1中连续3个字符未匹配字串2\n\n$a=\"abcdefg\";\n$b=\"efg\";\necho strcspn($a,$b);		\n//字串1中连续4个字符未匹配字串2');
/*!40000 ALTER TABLE `strfun` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `temp`
--

DROP TABLE IF EXISTS `temp`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `temp` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `ch` varchar(9999) DEFAULT NULL,
  `en` varchar(9999) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `temp`
--

LOCK TABLES `temp` WRITE;
/*!40000 ALTER TABLE `temp` DISABLE KEYS */;
INSERT INTO `temp` VALUES (1,'生成指定日期的时间戳，并用该时间戳转换成日期','\n\n$a = mktime(0,0,0,12,30,1999);\necho $a;	\n//946508400\n\necho date(\"Y-m-d H:i:s\",$a);	\n//1999-12-30 00:00:00');
/*!40000 ALTER TABLE `temp` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2016-12-18  8:42:03
